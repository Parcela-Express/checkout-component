/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CancelPaymentDTO} from '../model/CancelPaymentDTO';
import {CancelPaymentResponseDTO} from '../model/CancelPaymentResponseDTO';
import {CapturePaymentDto} from '../model/CapturePaymentDto';
import {CreateDebitPaymentDto} from '../model/CreateDebitPaymentDto';
import {CreateDebitPaymentResponseDTO} from '../model/CreateDebitPaymentResponseDTO';
import {CreatePaymentDto} from '../model/CreatePaymentDto';
import {CreatePaymentResponseDTO} from '../model/CreatePaymentResponseDTO';
import {CreatePaymentWithSplitDto} from '../model/CreatePaymentWithSplitDto';
import {CreatePixPaymentDto} from '../model/CreatePixPaymentDto';
import {CreatePixPaymentResponseDTO} from '../model/CreatePixPaymentResponseDTO';
import {CreatePixPaymentWithSplitDto} from '../model/CreatePixPaymentWithSplitDto';
import {CreatePixPaymentWithSplitResponseDTO} from '../model/CreatePixPaymentWithSplitResponseDTO';
import {GetSaleDto} from '../model/GetSaleDto';
import {PaymentDetailsDTO} from '../model/PaymentDetailsDTO';

/**
* Payments service.
* @module api/PaymentsApi
* @version 1.0
*/
export class PaymentsApi {

    /**
    * Constructs a new PaymentsApi. 
    * @alias module:api/PaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the capturePayment operation.
     * @callback moduleapi/PaymentsApi~capturePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSaleDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Capturar pagamento
     * @param {module:model/CapturePaymentDto} body 
     * @param {String} sellerId 
     * @param {String} saleId 
     * @param {module:api/PaymentsApi~capturePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    capturePayment(body, sellerId, saleId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling capturePayment");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling capturePayment");
      }
      // verify the required parameter 'saleId' is set
      if (saleId === undefined || saleId === null) {
        throw new Error("Missing the required parameter 'saleId' when calling capturePayment");
      }

      let pathParams = {
        'seller_id': sellerId,'sale_id': saleId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSaleDto;

      return this.apiClient.callApi(
        '/v1/payments/sellers/{seller_id}/sales/{sale_id}/capture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createDebitPayment operation.
     * @callback moduleapi/PaymentsApi~createDebitPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDebitPaymentResponseDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar um pagamento usando DÃ©bito
     * @param {module:model/CreateDebitPaymentDto} body 
     * @param {String} sellerId 
     * @param {module:api/PaymentsApi~createDebitPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createDebitPayment(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDebitPayment");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createDebitPayment");
      }

      let pathParams = {
        'seller_id': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDebitPaymentResponseDTO;

      return this.apiClient.callApi(
        '/v1/payments/sellers/{seller_id}/debit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createPayment operation.
     * @callback moduleapi/PaymentsApi~createPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePaymentResponseDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo pagamento
     * @param {module:model/CreatePaymentDto} body 
     * @param {String} sellerId 
     * @param {module:api/PaymentsApi~createPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPayment(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPayment");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createPayment");
      }

      let pathParams = {
        'seller_id': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePaymentResponseDTO;

      return this.apiClient.callApi(
        '/v1/payments/sellers/{seller_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createPaymentWithSplit operation.
     * @callback moduleapi/PaymentsApi~createPaymentWithSplitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePaymentResponseDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo pagamento online
     * @param {module:model/CreatePaymentWithSplitDto} body 
     * @param {String} sellerId 
     * @param {module:api/PaymentsApi~createPaymentWithSplitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPaymentWithSplit(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPaymentWithSplit");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createPaymentWithSplit");
      }

      let pathParams = {
        'seller_id': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePaymentResponseDTO;

      return this.apiClient.callApi(
        '/v2/payments/sellers/{seller_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createPixPayment operation.
     * @callback moduleapi/PaymentsApi~createPixPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePixPaymentResponseDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar um pagamento usando Pix
     * @param {module:model/CreatePixPaymentDto} body 
     * @param {String} sellerId 
     * @param {module:api/PaymentsApi~createPixPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPixPayment(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPixPayment");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createPixPayment");
      }

      let pathParams = {
        'seller_id': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePixPaymentResponseDTO;

      return this.apiClient.callApi(
        '/v1/payments/sellers/{seller_id}/pix', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createPixPaymentWithSplits operation.
     * @callback moduleapi/PaymentsApi~createPixPaymentWithSplitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePixPaymentWithSplitResponseDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar um pagamento usando Pix
     * @param {module:model/CreatePixPaymentWithSplitDto} body 
     * @param {String} sellerId 
     * @param {module:api/PaymentsApi~createPixPaymentWithSplitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPixPaymentWithSplits(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPixPaymentWithSplits");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createPixPaymentWithSplits");
      }

      let pathParams = {
        'seller_id': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePixPaymentWithSplitResponseDTO;

      return this.apiClient.callApi(
        '/v2/payments/sellers/{seller_id}/pix', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the paymentDetails operation.
     * @callback moduleapi/PaymentsApi~paymentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDebitPaymentResponseDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verificar detalhes de pagamento
     * @param {module:model/PaymentDetailsDTO} body 
     * @param {String} sellerId 
     * @param {String} saleId 
     * @param {module:api/PaymentsApi~paymentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    paymentDetails(body, sellerId, saleId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentDetails");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling paymentDetails");
      }
      // verify the required parameter 'saleId' is set
      if (saleId === undefined || saleId === null) {
        throw new Error("Missing the required parameter 'saleId' when calling paymentDetails");
      }

      let pathParams = {
        'seller_id': sellerId,'sale_id': saleId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDebitPaymentResponseDTO;

      return this.apiClient.callApi(
        '/v1/payments/sellers/{seller_id}/details/sale/{sale_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the paymentsControllerCancelPayment operation.
     * @callback moduleapi/PaymentsApi~paymentsControllerCancelPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelPaymentResponseDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancelar um pagamento
     * @param {module:model/CancelPaymentDTO} body 
     * @param {String} sellerId 
     * @param {String} saleId 
     * @param {module:api/PaymentsApi~paymentsControllerCancelPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    paymentsControllerCancelPayment(body, sellerId, saleId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentsControllerCancelPayment");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling paymentsControllerCancelPayment");
      }
      // verify the required parameter 'saleId' is set
      if (saleId === undefined || saleId === null) {
        throw new Error("Missing the required parameter 'saleId' when calling paymentsControllerCancelPayment");
      }

      let pathParams = {
        'seller_id': sellerId,'sale_id': saleId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelPaymentResponseDTO;

      return this.apiClient.callApi(
        '/v1/payments/sellers/{seller_id}/sales/{sale_id}/void', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}