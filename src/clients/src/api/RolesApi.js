/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateRoleDto from '../model/CreateRoleDto';
import GetRoleDto from '../model/GetRoleDto';
import ListByTypeDto from '../model/ListByTypeDto';
import UpdateRoleDto from '../model/UpdateRoleDto';

/**
* Roles service.
* @module api/RolesApi
* @version 1.0
*/
export default class RolesApi {

    /**
    * Constructs a new RolesApi. 
    * @alias module:api/RolesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRole operation.
     * @callback module:api/RolesApi~createRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRoleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar um perfil de usuário
     * @param {module:model/CreateRoleDto} CreateRoleDto 
     * @param {module:api/RolesApi~createRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRoleDto}
     */
    createRole(CreateRoleDto, callback) {
      let postBody = CreateRoleDto;
      // verify the required parameter 'CreateRoleDto' is set
      if (CreateRoleDto === undefined || CreateRoleDto === null) {
        throw new Error("Missing the required parameter 'CreateRoleDto' when calling createRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRoleDto;
      return this.apiClient.callApi(
        '/v1/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRole operation.
     * @callback module:api/RolesApi~getRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRoleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buscar perfil de usuário
     * @param {String} roleId 
     * @param {module:api/RolesApi~getRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRoleDto}
     */
    getRole(roleId, callback) {
      let postBody = null;
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling getRole");
      }

      let pathParams = {
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRoleDto;
      return this.apiClient.callApi(
        '/v1/roles/{roleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoles operation.
     * @callback module:api/RolesApi~listRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetRoleDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lista perfis de usuário
     * @param {module:api/RolesApi~listRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetRoleDto>}
     */
    listRoles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetRoleDto];
      return this.apiClient.callApi(
        '/v1/roles/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRolesByType operation.
     * @callback module:api/RolesApi~listRolesByTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetRoleDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lista perfis de usuário
     * @param {module:model/ListByTypeDto} ListByTypeDto 
     * @param {module:api/RolesApi~listRolesByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetRoleDto>}
     */
    listRolesByType(ListByTypeDto, callback) {
      let postBody = ListByTypeDto;
      // verify the required parameter 'ListByTypeDto' is set
      if (ListByTypeDto === undefined || ListByTypeDto === null) {
        throw new Error("Missing the required parameter 'ListByTypeDto' when calling listRolesByType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GetRoleDto];
      return this.apiClient.callApi(
        '/v1/roles/listByType', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRole operation.
     * @callback module:api/RolesApi~updateRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRoleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar um perfil de usuário
     * @param {String} roleId 
     * @param {module:model/UpdateRoleDto} UpdateRoleDto 
     * @param {module:api/RolesApi~updateRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRoleDto}
     */
    updateRole(roleId, UpdateRoleDto, callback) {
      let postBody = UpdateRoleDto;
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling updateRole");
      }
      // verify the required parameter 'UpdateRoleDto' is set
      if (UpdateRoleDto === undefined || UpdateRoleDto === null) {
        throw new Error("Missing the required parameter 'UpdateRoleDto' when calling updateRole");
      }

      let pathParams = {
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRoleDto;
      return this.apiClient.callApi(
        '/v1/roles/{roleId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
