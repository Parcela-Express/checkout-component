/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CreateProtestLinkDto} from '../model/CreateProtestLinkDto';
import {GetProtestLinkDto} from '../model/GetProtestLinkDto';
import {UpdateProtestLinkDto} from '../model/UpdateProtestLinkDto';

/**
* ProtestLinks service.
* @module api/ProtestLinksApi
* @version 1.0
*/
export class ProtestLinksApi {

    /**
    * Constructs a new ProtestLinksApi. 
    * @alias module:api/ProtestLinksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the cancelProtestLink operation.
     * @callback moduleapi/ProtestLinksApi~cancelProtestLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancelar um link de protesto
     * @param {String} sellerId 
     * @param {String} protestLinkId 
     * @param {module:api/ProtestLinksApi~cancelProtestLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelProtestLink(sellerId, protestLinkId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling cancelProtestLink");
      }
      // verify the required parameter 'protestLinkId' is set
      if (protestLinkId === undefined || protestLinkId === null) {
        throw new Error("Missing the required parameter 'protestLinkId' when calling cancelProtestLink");
      }

      let pathParams = {
        'sellerId': sellerId,'protestLinkId': protestLinkId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/protest-links/sellers/{sellerId}/{protestLinkId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createProtestLink operation.
     * @callback moduleapi/ProtestLinksApi~createProtestLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProtestLinkDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gerar link de protesto para o pagador de um estabelecimento
     * @param {module:model/CreateProtestLinkDto} body 
     * @param {module:api/ProtestLinksApi~createProtestLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createProtestLink(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createProtestLink");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProtestLinkDto;

      return this.apiClient.callApi(
        '/v1/protest-links', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProtestLinkByToken operation.
     * @callback moduleapi/ProtestLinksApi~getProtestLinkByTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProtestLinkDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar os dados do link de protesto informado
     * @param {String} token 
     * @param {module:api/ProtestLinksApi~getProtestLinkByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProtestLinkByToken(token, callback) {
      
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getProtestLinkByToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProtestLinkDto;

      return this.apiClient.callApi(
        '/v1/protest-links/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sentProtestLinkReceiptMail operation.
     * @callback moduleapi/ProtestLinksApi~sentProtestLinkReceiptMailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reenviar recibo para o email do pagador
     * @param {String} token 
     * @param {module:api/ProtestLinksApi~sentProtestLinkReceiptMailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sentProtestLinkReceiptMail(token, callback) {
      
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sentProtestLinkReceiptMail");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/protest-links/{token}/receipt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateProtestLink operation.
     * @callback moduleapi/ProtestLinksApi~updateProtestLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProtestLinkDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar um link de protesto
     * @param {module:model/UpdateProtestLinkDto} body 
     * @param {String} protestLinkId 
     * @param {module:api/ProtestLinksApi~updateProtestLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateProtestLink(body, protestLinkId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProtestLink");
      }
      // verify the required parameter 'protestLinkId' is set
      if (protestLinkId === undefined || protestLinkId === null) {
        throw new Error("Missing the required parameter 'protestLinkId' when calling updateProtestLink");
      }

      let pathParams = {
        'protestLinkId': protestLinkId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProtestLinkDto;

      return this.apiClient.callApi(
        '/v1/protest-links/{protestLinkId}/update', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}