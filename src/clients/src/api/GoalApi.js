/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateGoalDto from '../model/CreateGoalDto';
import GetGoalDto from '../model/GetGoalDto';
import UpdateGoalDto from '../model/UpdateGoalDto';

/**
* Goal service.
* @module api/GoalApi
* @version 1.0
*/
export default class GoalApi {

    /**
    * Constructs a new GoalApi. 
    * @alias module:api/GoalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGoal operation.
     * @callback module:api/GoalApi~createGoalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGoalDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar meta
     * @param {module:model/CreateGoalDto} CreateGoalDto 
     * @param {module:api/GoalApi~createGoalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGoalDto}
     */
    createGoal(CreateGoalDto, callback) {
      let postBody = CreateGoalDto;
      // verify the required parameter 'CreateGoalDto' is set
      if (CreateGoalDto === undefined || CreateGoalDto === null) {
        throw new Error("Missing the required parameter 'CreateGoalDto' when calling createGoal");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGoalDto;
      return this.apiClient.callApi(
        '/v1/goal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editGoal operation.
     * @callback module:api/GoalApi~editGoalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGoalDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Editar meta
     * @param {String} goalId 
     * @param {module:model/UpdateGoalDto} UpdateGoalDto 
     * @param {module:api/GoalApi~editGoalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGoalDto}
     */
    editGoal(goalId, UpdateGoalDto, callback) {
      let postBody = UpdateGoalDto;
      // verify the required parameter 'goalId' is set
      if (goalId === undefined || goalId === null) {
        throw new Error("Missing the required parameter 'goalId' when calling editGoal");
      }
      // verify the required parameter 'UpdateGoalDto' is set
      if (UpdateGoalDto === undefined || UpdateGoalDto === null) {
        throw new Error("Missing the required parameter 'UpdateGoalDto' when calling editGoal");
      }

      let pathParams = {
        'goalId': goalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGoalDto;
      return this.apiClient.callApi(
        '/v1/goal/{goalId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoal operation.
     * @callback module:api/GoalApi~getGoalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGoalDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obter meta pelo ID
     * @param {String} goalId 
     * @param {module:api/GoalApi~getGoalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGoalDto}
     */
    getGoal(goalId, callback) {
      let postBody = null;
      // verify the required parameter 'goalId' is set
      if (goalId === undefined || goalId === null) {
        throw new Error("Missing the required parameter 'goalId' when calling getGoal");
      }

      let pathParams = {
        'goalId': goalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGoalDto;
      return this.apiClient.callApi(
        '/v1/goal/{goalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGoals operation.
     * @callback module:api/GoalApi~listGoalsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetGoalDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar metas
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Data de inicio. Formato: yyyy-mm-dd
     * @param {String} opts.endDate Data de fim. Formato: yyyy-mm-dd
     * @param {Array.<String>} opts.responsibles Id dos respons√°veis
     * @param {String} opts.id 
     * @param {module:api/GoalApi~listGoalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetGoalDto>}
     */
    listGoals(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'responsibles': this.apiClient.buildCollectionParam(opts['responsibles'], 'multi'),
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetGoalDto];
      return this.apiClient.callApi(
        '/v1/goal/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
