/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CreateBilletDto} from '../model/CreateBilletDto';
import {GetBilletDto} from '../model/GetBilletDto';
import {GetBilletUrlDto} from '../model/GetBilletUrlDto';
import {GetOneBilletDto} from '../model/GetOneBilletDto';
import {InlineResponse200} from '../model/InlineResponse200';

/**
* Billets service.
* @module api/BilletsApi
* @version 1.0
*/
export class BilletsApi {

    /**
    * Constructs a new BilletsApi. 
    * @alias module:api/BilletsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createBilletPayment operation.
     * @callback moduleapi/BilletsApi~createBilletPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBilletDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo pagamento de boleto
     * @param {module:model/CreateBilletDto} body 
     * @param {String} sellerId 
     * @param {module:api/BilletsApi~createBilletPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createBilletPayment(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBilletPayment");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createBilletPayment");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBilletDto;

      return this.apiClient.callApi(
        '/v1/billets/{sellerId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createBilletPaymentV2 operation.
     * @callback moduleapi/BilletsApi~createBilletPaymentV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetBilletDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo lote de pagamento de boleto
     * @param {Array.<module:model/CreateBilletDto>} body 
     * @param {String} sellerId 
     * @param {module:api/BilletsApi~createBilletPaymentV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createBilletPaymentV2(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBilletPaymentV2");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createBilletPaymentV2");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GetBilletDto];

      return this.apiClient.callApi(
        '/v2/billets/{sellerId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBilletUrl operation.
     * @callback moduleapi/BilletsApi~getBilletUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBilletUrlDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retorna a URL do boleto
     * @param {String} billetId 
     * @param {module:api/BilletsApi~getBilletUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBilletUrl(billetId, callback) {
      
      let postBody = null;
      // verify the required parameter 'billetId' is set
      if (billetId === undefined || billetId === null) {
        throw new Error("Missing the required parameter 'billetId' when calling getBilletUrl");
      }

      let pathParams = {
        'billetId': billetId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBilletUrlDto;

      return this.apiClient.callApi(
        '/v1/billets/{billetId}/url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listBillets operation.
     * @callback moduleapi/BilletsApi~listBilletsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar boletos com status
     * @param {Number} limit 
     * @param {Number} currentPage 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to <.>)
     * @param {module:api/BilletsApi~listBilletsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listBillets(limit, currentPage, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listBillets");
      }
      // verify the required parameter 'currentPage' is set
      if (currentPage === undefined || currentPage === null) {
        throw new Error("Missing the required parameter 'currentPage' when calling listBillets");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'limit': limit,'current_page': currentPage,'sort': opts['sort']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/billets/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listOneBillet operation.
     * @callback moduleapi/BilletsApi~listOneBilletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOneBilletDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lista um boleto com status
     * @param {String} id 
     * @param {module:api/BilletsApi~listOneBilletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listOneBillet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listOneBillet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOneBilletDto;

      return this.apiClient.callApi(
        '/v1/billets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the payBillet operation.
     * @callback moduleapi/BilletsApi~payBilletCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pagar boleto (em ambiente de desenvolvimento)
     * @param {String} billetId 
     * @param {module:api/BilletsApi~payBilletCallback} callback The callback function, accepting three arguments: error, data, response
     */
    payBillet(billetId, callback) {
      
      let postBody = null;
      // verify the required parameter 'billetId' is set
      if (billetId === undefined || billetId === null) {
        throw new Error("Missing the required parameter 'billetId' when calling payBillet");
      }

      let pathParams = {
        'billetId': billetId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/billets/{billetId}/pay', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}