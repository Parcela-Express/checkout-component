/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateExportProtocolListDto from '../model/CreateExportProtocolListDto';
import CreateProtocolDto from '../model/CreateProtocolDto';
import CreateSellerProtocolDto from '../model/CreateSellerProtocolDto';
import GetDueDateDto from '../model/GetDueDateDto';
import GetProtocolDto from '../model/GetProtocolDto';
import GetProtocolsQueryDto from '../model/GetProtocolsQueryDto';
import GetSellerProtocolsQueryDto from '../model/GetSellerProtocolsQueryDto';
import PaginatedDto from '../model/PaginatedDto';
import UpdateProtocolDto from '../model/UpdateProtocolDto';

/**
* Protocol service.
* @module api/ProtocolApi
* @version 1.0
*/
export default class ProtocolApi {

    /**
    * Constructs a new ProtocolApi. 
    * @alias module:api/ProtocolApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProtocol operation.
     * @callback module:api/ProtocolApi~createProtocolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProtocolDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar protocolo
     * Em alternativa a esta rota, utilize a [v2](#/Protocol/createProtocolV2)
     * @param {module:model/CreateProtocolDto} CreateProtocolDto 
     * @param {module:api/ProtocolApi~createProtocolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProtocolDto}
     */
    createProtocol(CreateProtocolDto, callback) {
      let postBody = CreateProtocolDto;
      // verify the required parameter 'CreateProtocolDto' is set
      if (CreateProtocolDto === undefined || CreateProtocolDto === null) {
        throw new Error("Missing the required parameter 'CreateProtocolDto' when calling createProtocol");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProtocolDto;
      return this.apiClient.callApi(
        '/v1/protocol', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProtocolV2 operation.
     * @callback module:api/ProtocolApi~createProtocolV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProtocolDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar protocolo
     * @param {String} sellerId 
     * @param {module:model/CreateSellerProtocolDto} CreateSellerProtocolDto 
     * @param {module:api/ProtocolApi~createProtocolV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProtocolDto}
     */
    createProtocolV2(sellerId, CreateSellerProtocolDto, callback) {
      let postBody = CreateSellerProtocolDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createProtocolV2");
      }
      // verify the required parameter 'CreateSellerProtocolDto' is set
      if (CreateSellerProtocolDto === undefined || CreateSellerProtocolDto === null) {
        throw new Error("Missing the required parameter 'CreateSellerProtocolDto' when calling createProtocolV2");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProtocolDto;
      return this.apiClient.callApi(
        '/v2/protocol/seller/{sellerId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProtocolsListExportRequest operation.
     * @callback module:api/ProtocolApi~createProtocolsListExportRequestCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gerar uma requisição de exportação da lista de protocolos
     * @param {module:model/CreateExportProtocolListDto} CreateExportProtocolListDto 
     * @param {module:api/ProtocolApi~createProtocolsListExportRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createProtocolsListExportRequest(CreateExportProtocolListDto, callback) {
      let postBody = CreateExportProtocolListDto;
      // verify the required parameter 'CreateExportProtocolListDto' is set
      if (CreateExportProtocolListDto === undefined || CreateExportProtocolListDto === null) {
        throw new Error("Missing the required parameter 'CreateExportProtocolListDto' when calling createProtocolsListExportRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/protocol/list/export/requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProtocols operation.
     * @callback module:api/ProtocolApi~getAllProtocolsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetProtocolDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obter todos protocolos
     * @param {module:api/ProtocolApi~getAllProtocolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetProtocolDto>}
     */
    getAllProtocols(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetProtocolDto];
      return this.apiClient.callApi(
        '/v1/protocol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById operation.
     * @callback module:api/ProtocolApi~getByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProtocolDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obter protocolo pelo ID
     * @param {String} id 
     * @param {module:api/ProtocolApi~getByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProtocolDto}
     */
    getById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProtocolDto;
      return this.apiClient.callApi(
        '/v1/protocol/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDueDateBySeller operation.
     * @callback module:api/ProtocolApi~getDueDateBySellerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDueDateDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obter data de vencimento considerando os criterios do Estabelecimento.
     * @param {String} sellerId 
     * @param {String} date_start 
     * @param {module:api/ProtocolApi~getDueDateBySellerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDueDateDto}
     */
    getDueDateBySeller(sellerId, date_start, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getDueDateBySeller");
      }
      // verify the required parameter 'date_start' is set
      if (date_start === undefined || date_start === null) {
        throw new Error("Missing the required parameter 'date_start' when calling getDueDateBySeller");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'date_start': date_start
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDueDateDto;
      return this.apiClient.callApi(
        '/v1/protocol/due-date/{sellerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaginatedProtocolsBySeller operation.
     * @callback module:api/ProtocolApi~getPaginatedProtocolsBySellerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obter todos protocolos por Seller paginado
     * @param {module:model/GetProtocolsQueryDto} GetProtocolsQueryDto 
     * @param {module:api/ProtocolApi~getPaginatedProtocolsBySellerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    getPaginatedProtocolsBySeller(GetProtocolsQueryDto, callback) {
      let postBody = GetProtocolsQueryDto;
      // verify the required parameter 'GetProtocolsQueryDto' is set
      if (GetProtocolsQueryDto === undefined || GetProtocolsQueryDto === null) {
        throw new Error("Missing the required parameter 'GetProtocolsQueryDto' when calling getPaginatedProtocolsBySeller");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/protocol/getPaginatedBySeller', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaginatedProtocolsBySellerV2 operation.
     * @callback module:api/ProtocolApi~getPaginatedProtocolsBySellerV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obter todos protocolos por Seller paginado
     * @param {String} sellerId 
     * @param {module:model/GetSellerProtocolsQueryDto} GetSellerProtocolsQueryDto 
     * @param {module:api/ProtocolApi~getPaginatedProtocolsBySellerV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    getPaginatedProtocolsBySellerV2(sellerId, GetSellerProtocolsQueryDto, callback) {
      let postBody = GetSellerProtocolsQueryDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getPaginatedProtocolsBySellerV2");
      }
      // verify the required parameter 'GetSellerProtocolsQueryDto' is set
      if (GetSellerProtocolsQueryDto === undefined || GetSellerProtocolsQueryDto === null) {
        throw new Error("Missing the required parameter 'GetSellerProtocolsQueryDto' when calling getPaginatedProtocolsBySellerV2");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v2/protocol/getPaginatedBySeller/{sellerId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProtocol operation.
     * @callback module:api/ProtocolApi~updateProtocolCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar protocolo
     * @param {String} id 
     * @param {module:model/UpdateProtocolDto} UpdateProtocolDto 
     * @param {module:api/ProtocolApi~updateProtocolCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProtocol(id, UpdateProtocolDto, callback) {
      let postBody = UpdateProtocolDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProtocol");
      }
      // verify the required parameter 'UpdateProtocolDto' is set
      if (UpdateProtocolDto === undefined || UpdateProtocolDto === null) {
        throw new Error("Missing the required parameter 'UpdateProtocolDto' when calling updateProtocol");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/protocol/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
