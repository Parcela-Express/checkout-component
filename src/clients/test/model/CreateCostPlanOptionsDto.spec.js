/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ParcelaExpressApi);
  }
}(this, function(expect, ParcelaExpressApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CreateCostPlanOptionsDto', function() {
      beforeEach(function() {
        instance = new ParcelaExpressApi.CreateCostPlanOptionsDto();
      });

      it('should create an instance of CreateCostPlanOptionsDto', function() {
        // TODO: update the code to test CreateCostPlanOptionsDto
        expect(instance).to.be.a(ParcelaExpressApi.CreateCostPlanOptionsDto);
      });

      it('should have the property fixedAmount (base name: "fixed_amount")', function() {
        // TODO: update the code to test the property fixedAmount
        expect(instance).to.have.property('fixedAmount');
        // expect(instance.fixedAmount).to.be(expectedValueLiteral);
      });

      it('should have the property bankFixedAmount (base name: "bank_fixed_amount")', function() {
        // TODO: update the code to test the property bankFixedAmount
        expect(instance).to.have.property('bankFixedAmount');
        // expect(instance.bankFixedAmount).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property typeStatus (base name: "type_status")', function() {
        // TODO: update the code to test the property typeStatus
        expect(instance).to.have.property('typeStatus');
        // expect(instance.typeStatus).to.be(expectedValueLiteral);
      });

      it('should have the property brand (base name: "brand")', function() {
        // TODO: update the code to test the property brand
        expect(instance).to.have.property('brand');
        // expect(instance.brand).to.be(expectedValueLiteral);
      });

      it('should have the property brandFee (base name: "brand_fee")', function() {
        // TODO: update the code to test the property brandFee
        expect(instance).to.have.property('brandFee');
        // expect(instance.brandFee).to.be(expectedValueLiteral);
      });

      it('should have the property brandFeeType (base name: "brand_fee_type")', function() {
        // TODO: update the code to test the property brandFeeType
        expect(instance).to.have.property('brandFeeType');
        // expect(instance.brandFeeType).to.be(expectedValueLiteral);
      });

      it('should have the property installments (base name: "installments")', function() {
        // TODO: update the code to test the property installments
        expect(instance).to.have.property('installments');
        // expect(instance.installments).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeFeeType (base name: "exchange_fee_type")', function() {
        // TODO: update the code to test the property exchangeFeeType
        expect(instance).to.have.property('exchangeFeeType');
        // expect(instance.exchangeFeeType).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeFee (base name: "exchange_fee")', function() {
        // TODO: update the code to test the property exchangeFee
        expect(instance).to.have.property('exchangeFee');
        // expect(instance.exchangeFee).to.be(expectedValueLiteral);
      });

      it('should have the property anticipationFeeType (base name: "anticipation_fee_type")', function() {
        // TODO: update the code to test the property anticipationFeeType
        expect(instance).to.have.property('anticipationFeeType');
        // expect(instance.anticipationFeeType).to.be(expectedValueLiteral);
      });

      it('should have the property anticipationFee (base name: "anticipation_fee")', function() {
        // TODO: update the code to test the property anticipationFee
        expect(instance).to.have.property('anticipationFee');
        // expect(instance.anticipationFee).to.be(expectedValueLiteral);
      });

      it('should have the property markupFeeType (base name: "markup_fee_type")', function() {
        // TODO: update the code to test the property markupFeeType
        expect(instance).to.have.property('markupFeeType');
        // expect(instance.markupFeeType).to.be(expectedValueLiteral);
      });

      it('should have the property markupFee (base name: "markup_fee")', function() {
        // TODO: update the code to test the property markupFee
        expect(instance).to.have.property('markupFee');
        // expect(instance.markupFee).to.be(expectedValueLiteral);
      });

      it('should have the property isCap (base name: "is_cap")', function() {
        // TODO: update the code to test the property isCap
        expect(instance).to.have.property('isCap');
        // expect(instance.isCap).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeCap (base name: "exchange_cap")', function() {
        // TODO: update the code to test the property exchangeCap
        expect(instance).to.have.property('exchangeCap');
        // expect(instance.exchangeCap).to.be(expectedValueLiteral);
      });

    });
  });

}));
