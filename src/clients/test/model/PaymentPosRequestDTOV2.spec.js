/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ParcelaExpressApi);
  }
}(this, function(expect, ParcelaExpressApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PaymentPosRequestDTOV2', function() {
      beforeEach(function() {
        instance = new ParcelaExpressApi.PaymentPosRequestDTOV2();
      });

      it('should create an instance of PaymentPosRequestDTOV2', function() {
        // TODO: update the code to test PaymentPosRequestDTOV2
        expect(instance).to.be.a(ParcelaExpressApi.PaymentPosRequestDTOV2);
      });

      it('should have the property terminalId (base name: "terminal_id")', function() {
        // TODO: update the code to test the property terminalId
        expect(instance).to.have.property('terminalId');
        // expect(instance.terminalId).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property isDebit (base name: "is_debit")', function() {
        // TODO: update the code to test the property isDebit
        expect(instance).to.have.property('isDebit');
        // expect(instance.isDebit).to.be(expectedValueLiteral);
      });

      it('should have the property instalments (base name: "instalments")', function() {
        // TODO: update the code to test the property instalments
        expect(instance).to.have.property('instalments');
        // expect(instance.instalments).to.be(expectedValueLiteral);
      });

      it('should have the property serviceId (base name: "service_id")', function() {
        // TODO: update the code to test the property serviceId
        expect(instance).to.have.property('serviceId');
        // expect(instance.serviceId).to.be(expectedValueLiteral);
      });

      it('should have the property isPix (base name: "is_pix")', function() {
        // TODO: update the code to test the property isPix
        expect(instance).to.have.property('isPix');
        // expect(instance.isPix).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property document (base name: "document")', function() {
        // TODO: update the code to test the property document
        expect(instance).to.have.property('document');
        // expect(instance.document).to.be(expectedValueLiteral);
      });

      it('should have the property hasSplitRules (base name: "has_split_rules")', function() {
        // TODO: update the code to test the property hasSplitRules
        expect(instance).to.have.property('hasSplitRules');
        // expect(instance.hasSplitRules).to.be(expectedValueLiteral);
      });

      it('should have the property splitRules (base name: "split_rules")', function() {
        // TODO: update the code to test the property splitRules
        expect(instance).to.have.property('splitRules');
        // expect(instance.splitRules).to.be(expectedValueLiteral);
      });

    });
  });

}));
