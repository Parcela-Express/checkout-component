/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateResponsibleDto from '../model/CreateResponsibleDto';
import GetResponsibleDto from '../model/GetResponsibleDto';
import UpdateResponsibleDto from '../model/UpdateResponsibleDto';

/**
* Responsible service.
* @module api/ResponsibleApi
* @version 1.0
*/
export default class ResponsibleApi {

    /**
    * Constructs a new ResponsibleApi. 
    * @alias module:api/ResponsibleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createResponsible operation.
     * @callback module:api/ResponsibleApi~createResponsibleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResponsibleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar um respons치vel
     * @param {module:model/CreateResponsibleDto} CreateResponsibleDto 
     * @param {module:api/ResponsibleApi~createResponsibleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResponsibleDto}
     */
    createResponsible(CreateResponsibleDto, callback) {
      let postBody = CreateResponsibleDto;
      // verify the required parameter 'CreateResponsibleDto' is set
      if (CreateResponsibleDto === undefined || CreateResponsibleDto === null) {
        throw new Error("Missing the required parameter 'CreateResponsibleDto' when calling createResponsible");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResponsibleDto;
      return this.apiClient.callApi(
        '/v1/responsible', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editResponsible operation.
     * @callback module:api/ResponsibleApi~editResponsibleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResponsibleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Editar respons치vel
     * @param {String} responsibleId 
     * @param {module:model/UpdateResponsibleDto} UpdateResponsibleDto 
     * @param {module:api/ResponsibleApi~editResponsibleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResponsibleDto}
     */
    editResponsible(responsibleId, UpdateResponsibleDto, callback) {
      let postBody = UpdateResponsibleDto;
      // verify the required parameter 'responsibleId' is set
      if (responsibleId === undefined || responsibleId === null) {
        throw new Error("Missing the required parameter 'responsibleId' when calling editResponsible");
      }
      // verify the required parameter 'UpdateResponsibleDto' is set
      if (UpdateResponsibleDto === undefined || UpdateResponsibleDto === null) {
        throw new Error("Missing the required parameter 'UpdateResponsibleDto' when calling editResponsible");
      }

      let pathParams = {
        'responsibleId': responsibleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResponsibleDto;
      return this.apiClient.callApi(
        '/v1/responsible/{responsibleId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResponsible operation.
     * @callback module:api/ResponsibleApi~getResponsibleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResponsibleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obter respons치vel pelo ID
     * @param {String} responsibleId 
     * @param {module:api/ResponsibleApi~getResponsibleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResponsibleDto}
     */
    getResponsible(responsibleId, callback) {
      let postBody = null;
      // verify the required parameter 'responsibleId' is set
      if (responsibleId === undefined || responsibleId === null) {
        throw new Error("Missing the required parameter 'responsibleId' when calling getResponsible");
      }

      let pathParams = {
        'responsibleId': responsibleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetResponsibleDto;
      return this.apiClient.callApi(
        '/v1/responsible/{responsibleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResponsible operation.
     * @callback module:api/ResponsibleApi~listResponsibleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetResponsibleDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar respons치veis
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type 
     * @param {Boolean} opts.is_active 
     * @param {module:api/ResponsibleApi~listResponsibleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetResponsibleDto>}
     */
    listResponsible(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'is_active': opts['is_active']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetResponsibleDto];
      return this.apiClient.callApi(
        '/v1/responsible/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
