/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CreateSalePlanDto} from '../model/CreateSalePlanDto';
import {GetPaymentTypeDto} from '../model/GetPaymentTypeDto';
import {GetSalePlanDto} from '../model/GetSalePlanDto';
import {IncludePaymentTypesDto} from '../model/IncludePaymentTypesDto';
import {InlineResponse200} from '../model/InlineResponse200';

/**
* SalesPlans service.
* @module api/SalesPlansApi
* @version 1.0
*/
export class SalesPlansApi {

    /**
    * Constructs a new SalesPlansApi. 
    * @alias module:api/SalesPlansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addPaymentType operation.
     * @callback moduleapi/SalesPlansApi~addPaymentTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSalePlanDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associar um ou mais tipo(s) de pagamento(s) a um plano de vendas
     * @param {module:model/IncludePaymentTypesDto} body 
     * @param {String} salePlanId 
     * @param {module:api/SalesPlansApi~addPaymentTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addPaymentType(body, salePlanId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPaymentType");
      }
      // verify the required parameter 'salePlanId' is set
      if (salePlanId === undefined || salePlanId === null) {
        throw new Error("Missing the required parameter 'salePlanId' when calling addPaymentType");
      }

      let pathParams = {
        'salePlanId': salePlanId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSalePlanDto;

      return this.apiClient.callApi(
        '/v1/sales-plans/{salePlanId}/payment-types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createSalesPlan operation.
     * @callback moduleapi/SalesPlansApi~createSalesPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSalePlanDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar plano de vendas
     * @param {module:model/CreateSalePlanDto} body 
     * @param {module:api/SalesPlansApi~createSalesPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createSalesPlan(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSalesPlan");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSalePlanDto;

      return this.apiClient.callApi(
        '/v1/sales-plans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listAllSalePlan operation.
     * @callback moduleapi/SalesPlansApi~listAllSalePlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar Todos planos de venda
     * @param {Number} limit 
     * @param {Number} currentPage 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to <.>)
     * @param {String} opts.id 
     * @param {Array.<module:model/String>} opts.type 
     * @param {String} opts.name 
     * @param {module:api/SalesPlansApi~listAllSalePlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listAllSalePlan(limit, currentPage, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listAllSalePlan");
      }
      // verify the required parameter 'currentPage' is set
      if (currentPage === undefined || currentPage === null) {
        throw new Error("Missing the required parameter 'currentPage' when calling listAllSalePlan");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'limit': limit,'current_page': currentPage,'sort': opts['sort'],'id': opts['id'],'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),'name': opts['name']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/sales-plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSalePlan operation.
     * @callback moduleapi/SalesPlansApi~listSalePlanCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetSalePlanDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar planos de venda
     * @param {module:api/SalesPlansApi~listSalePlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSalePlan(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetSalePlanDto];

      return this.apiClient.callApi(
        '/v1/sales-plans/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSalePlanPaymentTypes operation.
     * @callback moduleapi/SalesPlansApi~listSalePlanPaymentTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetPaymentTypeDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar as formas de pagamento do plano de vendas informado
     * @param {String} salePlanId 
     * @param {module:api/SalesPlansApi~listSalePlanPaymentTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSalePlanPaymentTypes(salePlanId, callback) {
      
      let postBody = null;
      // verify the required parameter 'salePlanId' is set
      if (salePlanId === undefined || salePlanId === null) {
        throw new Error("Missing the required parameter 'salePlanId' when calling listSalePlanPaymentTypes");
      }

      let pathParams = {
        'salePlanId': salePlanId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetPaymentTypeDto];

      return this.apiClient.callApi(
        '/v1/sales-plans/{salePlanId}/payment-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}