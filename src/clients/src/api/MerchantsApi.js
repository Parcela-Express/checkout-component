/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateMerchantDto from '../model/CreateMerchantDto';
import CreateMerchantUserDto from '../model/CreateMerchantUserDto';
import GetMerchantDto from '../model/GetMerchantDto';
import GetMerchantSalePlanDto from '../model/GetMerchantSalePlanDto';
import GetMerchantUserDto from '../model/GetMerchantUserDto';
import PaginatedDto from '../model/PaginatedDto';
import UpdateMerchantDto from '../model/UpdateMerchantDto';
import UpdateMerchantUserDto from '../model/UpdateMerchantUserDto';

/**
* Merchants service.
* @module api/MerchantsApi
* @version 1.0
*/
export default class MerchantsApi {

    /**
    * Constructs a new MerchantsApi. 
    * @alias module:api/MerchantsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMerchant operation.
     * @callback module:api/MerchantsApi~createMerchantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMerchantDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar Merchant
     * @param {module:model/CreateMerchantDto} CreateMerchantDto 
     * @param {module:api/MerchantsApi~createMerchantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMerchantDto}
     */
    createMerchant(CreateMerchantDto, callback) {
      let postBody = CreateMerchantDto;
      // verify the required parameter 'CreateMerchantDto' is set
      if (CreateMerchantDto === undefined || CreateMerchantDto === null) {
        throw new Error("Missing the required parameter 'CreateMerchantDto' when calling createMerchant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetMerchantDto;
      return this.apiClient.callApi(
        '/v1/merchants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMerchantUser operation.
     * @callback module:api/MerchantsApi~createMerchantUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMerchantUserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar usuário do merchant
     * @param {String} merchantId 
     * @param {module:model/CreateMerchantUserDto} CreateMerchantUserDto 
     * @param {module:api/MerchantsApi~createMerchantUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMerchantUserDto}
     */
    createMerchantUser(merchantId, CreateMerchantUserDto, callback) {
      let postBody = CreateMerchantUserDto;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling createMerchantUser");
      }
      // verify the required parameter 'CreateMerchantUserDto' is set
      if (CreateMerchantUserDto === undefined || CreateMerchantUserDto === null) {
        throw new Error("Missing the required parameter 'CreateMerchantUserDto' when calling createMerchantUser");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetMerchantUserDto;
      return this.apiClient.callApi(
        '/v1/merchants/{merchantId}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editMerchant operation.
     * @callback module:api/MerchantsApi~editMerchantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMerchantDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Editar Merchant
     * @param {String} merchantId 
     * @param {module:model/UpdateMerchantDto} UpdateMerchantDto 
     * @param {module:api/MerchantsApi~editMerchantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMerchantDto}
     */
    editMerchant(merchantId, UpdateMerchantDto, callback) {
      let postBody = UpdateMerchantDto;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling editMerchant");
      }
      // verify the required parameter 'UpdateMerchantDto' is set
      if (UpdateMerchantDto === undefined || UpdateMerchantDto === null) {
        throw new Error("Missing the required parameter 'UpdateMerchantDto' when calling editMerchant");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetMerchantDto;
      return this.apiClient.callApi(
        '/v1/merchants/{merchantId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMerchant operation.
     * @callback module:api/MerchantsApi~getMerchantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMerchantDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obter merchant pelo ID
     * @param {String} merchantId 
     * @param {module:api/MerchantsApi~getMerchantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMerchantDto}
     */
    getMerchant(merchantId, callback) {
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling getMerchant");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMerchantDto;
      return this.apiClient.callApi(
        '/v1/merchants/{merchantId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllMerchantUsers operation.
     * @callback module:api/MerchantsApi~listAllMerchantUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lista todos usuários do tipo merchant
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to 'time-descending')
     * @param {module:api/MerchantsApi~listAllMerchantUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listAllMerchantUsers(limit, current_page, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listAllMerchantUsers");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listAllMerchantUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/merchants/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMerchantSalesPlans operation.
     * @callback module:api/MerchantsApi~listMerchantSalesPlansCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetMerchantSalePlanDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar planos de vendas do estabelecimento principal
     * @param {String} merchantId 
     * @param {module:api/MerchantsApi~listMerchantSalesPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetMerchantSalePlanDto>}
     */
    listMerchantSalesPlans(merchantId, callback) {
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling listMerchantSalesPlans");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetMerchantSalePlanDto];
      return this.apiClient.callApi(
        '/v1/merchants/{merchantId}/sales-plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMerchantUsers operation.
     * @callback module:api/MerchantsApi~listMerchantUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lista os usuários do merchant
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {String} merchantId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to 'time-descending')
     * @param {module:api/MerchantsApi~listMerchantUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listMerchantUsers(limit, current_page, merchantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listMerchantUsers");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listMerchantUsers");
      }
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling listMerchantUsers");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/merchants/{merchantId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMerchants operation.
     * @callback module:api/MerchantsApi~listMerchantsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetMerchantDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar estabelecimentos principais
     * @param {module:api/MerchantsApi~listMerchantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetMerchantDto>}
     */
    listMerchants(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetMerchantDto];
      return this.apiClient.callApi(
        '/v1/merchants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMerchantUser operation.
     * @callback module:api/MerchantsApi~updateMerchantUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMerchantUserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar usuário do merchant
     * @param {String} merchantId 
     * @param {String} userId 
     * @param {module:model/UpdateMerchantUserDto} UpdateMerchantUserDto 
     * @param {module:api/MerchantsApi~updateMerchantUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMerchantUserDto}
     */
    updateMerchantUser(merchantId, userId, UpdateMerchantUserDto, callback) {
      let postBody = UpdateMerchantUserDto;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling updateMerchantUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateMerchantUser");
      }
      // verify the required parameter 'UpdateMerchantUserDto' is set
      if (UpdateMerchantUserDto === undefined || UpdateMerchantUserDto === null) {
        throw new Error("Missing the required parameter 'UpdateMerchantUserDto' when calling updateMerchantUser");
      }

      let pathParams = {
        'merchantId': merchantId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetMerchantUserDto;
      return this.apiClient.callApi(
        '/v1/merchants/{merchantId}/users/{userId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
