/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthorizeTransactionDTO from '../model/AuthorizeTransactionDTO';
import PaymentPosRequest from '../model/PaymentPosRequest';

/**
* Celcoin service.
* @module api/CelcoinApi
* @version 1.0
*/
export default class CelcoinApi {

    /**
    * Constructs a new CelcoinApi. 
    * @alias module:api/CelcoinApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authorize operation.
     * @callback module:api/CelcoinApi~authorizeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Autoriza um pagamento na celcoin
     * @param {module:model/AuthorizeTransactionDTO} AuthorizeTransactionDTO 
     * @param {module:api/CelcoinApi~authorizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    authorize(AuthorizeTransactionDTO, callback) {
      let postBody = AuthorizeTransactionDTO;
      // verify the required parameter 'AuthorizeTransactionDTO' is set
      if (AuthorizeTransactionDTO === undefined || AuthorizeTransactionDTO === null) {
        throw new Error("Missing the required parameter 'AuthorizeTransactionDTO' when calling authorize");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/celcoin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancel operation.
     * @callback module:api/CelcoinApi~cancelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancela um pagamento.
     * @param {String} transactionId 
     * @param {module:api/CelcoinApi~cancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancel(transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling cancel");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/celcoin/payment/{transactionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the celcoinCashin operation.
     * @callback module:api/CelcoinApi~celcoinCashinCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo pagamento celcoin via Pos
     * @param {module:api/CelcoinApi~celcoinCashinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    celcoinCashin(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v1/celcoin/process/cash_in', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the celcoinPos operation.
     * @callback module:api/CelcoinApi~celcoinPosCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo pagamento celcoin via Pos
     * @param {String} seller_id 
     * @param {module:model/PaymentPosRequest} PaymentPosRequest 
     * @param {module:api/CelcoinApi~celcoinPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    celcoinPos(seller_id, PaymentPosRequest, callback) {
      let postBody = PaymentPosRequest;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling celcoinPos");
      }
      // verify the required parameter 'PaymentPosRequest' is set
      if (PaymentPosRequest === undefined || PaymentPosRequest === null) {
        throw new Error("Missing the required parameter 'PaymentPosRequest' when calling celcoinPos");
      }

      let pathParams = {
        'seller_id': seller_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/celcoin/pos/{seller_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayment operation.
     * @callback module:api/CelcoinApi~getPaymentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Busca um status de pagamento na celcoin
     * @param {String} transactionId 
     * @param {module:api/CelcoinApi~getPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getPayment(transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getPayment");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/celcoin/payment/{transactionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
