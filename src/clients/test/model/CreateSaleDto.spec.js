/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ParcelaExpressApi);
  }
}(this, function(expect, ParcelaExpressApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CreateSaleDto', function() {
      beforeEach(function() {
        instance = new ParcelaExpressApi.CreateSaleDto();
      });

      it('should create an instance of CreateSaleDto', function() {
        // TODO: update the code to test CreateSaleDto
        expect(instance).to.be.a(ParcelaExpressApi.CreateSaleDto);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property originalAmount (base name: "original_amount")', function() {
        // TODO: update the code to test the property originalAmount
        expect(instance).to.have.property('originalAmount');
        // expect(instance.originalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property acquirerReference (base name: "acquirer_reference")', function() {
        // TODO: update the code to test the property acquirerReference
        expect(instance).to.have.property('acquirerReference');
        // expect(instance.acquirerReference).to.be(expectedValueLiteral);
      });

      it('should have the property formPayment (base name: "form_payment")', function() {
        // TODO: update the code to test the property formPayment
        expect(instance).to.have.property('formPayment');
        // expect(instance.formPayment).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property salePlanId (base name: "sale_plan_id")', function() {
        // TODO: update the code to test the property salePlanId
        expect(instance).to.have.property('salePlanId');
        // expect(instance.salePlanId).to.be(expectedValueLiteral);
      });

      it('should have the property paymentTypeId (base name: "payment_type_id")', function() {
        // TODO: update the code to test the property paymentTypeId
        expect(instance).to.have.property('paymentTypeId');
        // expect(instance.paymentTypeId).to.be(expectedValueLiteral);
      });

      it('should have the property payerId (base name: "payer_id")', function() {
        // TODO: update the code to test the property payerId
        expect(instance).to.have.property('payerId');
        // expect(instance.payerId).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

    });
  });

}));
