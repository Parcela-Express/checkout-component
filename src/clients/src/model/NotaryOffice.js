/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotaryOffice model module.
 * @module model/NotaryOffice
 * @version 1.0
 */
class NotaryOffice {
    /**
     * Constructs a new <code>NotaryOffice</code>.
     * @alias module:model/NotaryOffice
     * @param cns {String} 
     * @param assignment {String} 
     * @param phone {String} 
     * @param secondary_phone {String} 
     * @param email {String} 
     * @param zipcode {String} 
     * @param street {String} 
     * @param address_number {String} 
     * @param district {String} 
     * @param city {String} 
     * @param state {String} 
     * @param responsible {String} 
     * @param invoicing {Number} 
     */
    constructor(cns, assignment, phone, secondary_phone, email, zipcode, street, address_number, district, city, state, responsible, invoicing) { 
        
        NotaryOffice.initialize(this, cns, assignment, phone, secondary_phone, email, zipcode, street, address_number, district, city, state, responsible, invoicing);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cns, assignment, phone, secondary_phone, email, zipcode, street, address_number, district, city, state, responsible, invoicing) { 
        obj['cns'] = cns;
        obj['assignment'] = assignment;
        obj['phone'] = phone;
        obj['secondary_phone'] = secondary_phone;
        obj['email'] = email;
        obj['zipcode'] = zipcode;
        obj['street'] = street;
        obj['address_number'] = address_number;
        obj['district'] = district;
        obj['city'] = city;
        obj['state'] = state;
        obj['responsible'] = responsible;
        obj['invoicing'] = invoicing;
    }

    /**
     * Constructs a <code>NotaryOffice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotaryOffice} obj Optional instance to populate.
     * @return {module:model/NotaryOffice} The populated <code>NotaryOffice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotaryOffice();

            if (data.hasOwnProperty('cns')) {
                obj['cns'] = ApiClient.convertToType(data['cns'], 'String');
            }
            if (data.hasOwnProperty('assignment')) {
                obj['assignment'] = ApiClient.convertToType(data['assignment'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('secondary_phone')) {
                obj['secondary_phone'] = ApiClient.convertToType(data['secondary_phone'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('zipcode')) {
                obj['zipcode'] = ApiClient.convertToType(data['zipcode'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('address_number')) {
                obj['address_number'] = ApiClient.convertToType(data['address_number'], 'String');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('responsible')) {
                obj['responsible'] = ApiClient.convertToType(data['responsible'], 'String');
            }
            if (data.hasOwnProperty('invoicing')) {
                obj['invoicing'] = ApiClient.convertToType(data['invoicing'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {String} cns
 */
NotaryOffice.prototype['cns'] = undefined;

/**
 * @member {String} assignment
 */
NotaryOffice.prototype['assignment'] = undefined;

/**
 * @member {String} phone
 */
NotaryOffice.prototype['phone'] = undefined;

/**
 * @member {String} secondary_phone
 */
NotaryOffice.prototype['secondary_phone'] = undefined;

/**
 * @member {String} email
 */
NotaryOffice.prototype['email'] = undefined;

/**
 * @member {String} zipcode
 */
NotaryOffice.prototype['zipcode'] = undefined;

/**
 * @member {String} street
 */
NotaryOffice.prototype['street'] = undefined;

/**
 * @member {String} address_number
 */
NotaryOffice.prototype['address_number'] = undefined;

/**
 * @member {String} district
 */
NotaryOffice.prototype['district'] = undefined;

/**
 * @member {String} city
 */
NotaryOffice.prototype['city'] = undefined;

/**
 * @member {String} state
 */
NotaryOffice.prototype['state'] = undefined;

/**
 * @member {String} responsible
 */
NotaryOffice.prototype['responsible'] = undefined;

/**
 * @member {Number} invoicing
 */
NotaryOffice.prototype['invoicing'] = undefined;






export default NotaryOffice;

