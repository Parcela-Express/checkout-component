/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCostPlanDto from '../model/CreateCostPlanDto';
import GetCostPlanDto from '../model/GetCostPlanDto';
import PaginatedDto from '../model/PaginatedDto';

/**
* CostsPlans service.
* @module api/CostsPlansApi
* @version 1.0
*/
export default class CostsPlansApi {

    /**
    * Constructs a new CostsPlansApi. 
    * @alias module:api/CostsPlansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCostPlan operation.
     * @callback module:api/CostsPlansApi~createCostPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCostPlanDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar plano de custo
     * @param {module:model/CreateCostPlanDto} CreateCostPlanDto 
     * @param {module:api/CostsPlansApi~createCostPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCostPlanDto}
     */
    createCostPlan(CreateCostPlanDto, callback) {
      let postBody = CreateCostPlanDto;
      // verify the required parameter 'CreateCostPlanDto' is set
      if (CreateCostPlanDto === undefined || CreateCostPlanDto === null) {
        throw new Error("Missing the required parameter 'CreateCostPlanDto' when calling createCostPlan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCostPlanDto;
      return this.apiClient.callApi(
        '/v1/costs-plans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCostPlan operation.
     * @callback module:api/CostsPlansApi~getCostPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCostPlanDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtém dados do plano de custo através do id.
     * @param {String} costPlanId 
     * @param {module:api/CostsPlansApi~getCostPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCostPlanDto}
     */
    getCostPlan(costPlanId, callback) {
      let postBody = null;
      // verify the required parameter 'costPlanId' is set
      if (costPlanId === undefined || costPlanId === null) {
        throw new Error("Missing the required parameter 'costPlanId' when calling getCostPlan");
      }

      let pathParams = {
        'costPlanId': costPlanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCostPlanDto;
      return this.apiClient.callApi(
        '/v1/costs-plans/{costPlanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllCostsPlans operation.
     * @callback module:api/CostsPlansApi~listAllCostsPlansCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCostPlanDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar todos os planos de custos cadastrados
     * @param {module:api/CostsPlansApi~listAllCostsPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCostPlanDto>}
     */
    listAllCostsPlans(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetCostPlanDto];
      return this.apiClient.callApi(
        '/v1/costs-plans/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCostsPlans operation.
     * @callback module:api/CostsPlansApi~listCostsPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os planos de custos cadastrados
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to 'time-descending')
     * @param {String} opts.name 
     * @param {module:api/CostsPlansApi~listCostsPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listCostsPlans(limit, current_page, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listCostsPlans");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listCostsPlans");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/costs-plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
