/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ParcelaExpressApi);
  }
}(this, function(expect, ParcelaExpressApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TransactionDto', function() {
      beforeEach(function() {
        instance = new ParcelaExpressApi.TransactionDto();
      });

      it('should create an instance of TransactionDto', function() {
        // TODO: update the code to test TransactionDto
        expect(instance).to.be.a(ParcelaExpressApi.TransactionDto);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property sellerId (base name: "seller_id")', function() {
        // TODO: update the code to test the property sellerId
        expect(instance).to.have.property('sellerId');
        // expect(instance.sellerId).to.be(expectedValueLiteral);
      });

      it('should have the property transactionNumber (base name: "transaction_number")', function() {
        // TODO: update the code to test the property transactionNumber
        expect(instance).to.have.property('transactionNumber');
        // expect(instance.transactionNumber).to.be(expectedValueLiteral);
      });

      it('should have the property amountWithoutFees (base name: "amount_without_fees")', function() {
        // TODO: update the code to test the property amountWithoutFees
        expect(instance).to.have.property('amountWithoutFees');
        // expect(instance.amountWithoutFees).to.be(expectedValueLiteral);
      });

      it('should have the property amountWithFees (base name: "amount_with_fees")', function() {
        // TODO: update the code to test the property amountWithFees
        expect(instance).to.have.property('amountWithFees');
        // expect(instance.amountWithFees).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property fees (base name: "fees")', function() {
        // TODO: update the code to test the property fees
        expect(instance).to.have.property('fees');
        // expect(instance.fees).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMethod (base name: "payment_method")', function() {
        // TODO: update the code to test the property paymentMethod
        expect(instance).to.have.property('paymentMethod');
        // expect(instance.paymentMethod).to.be(expectedValueLiteral);
      });

      it('should have the property operationType (base name: "operation_type")', function() {
        // TODO: update the code to test the property operationType
        expect(instance).to.have.property('operationType');
        // expect(instance.operationType).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property source (base name: "source")', function() {
        // TODO: update the code to test the property source
        expect(instance).to.have.property('source');
        // expect(instance.source).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updated_at")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property accountingAccountId (base name: "accounting_account_id")', function() {
        // TODO: update the code to test the property accountingAccountId
        expect(instance).to.have.property('accountingAccountId');
        // expect(instance.accountingAccountId).to.be(expectedValueLiteral);
      });

      it('should have the property merchantHasPreCapture (base name: "merchant_has_pre_capture")', function() {
        // TODO: update the code to test the property merchantHasPreCapture
        expect(instance).to.have.property('merchantHasPreCapture');
        // expect(instance.merchantHasPreCapture).to.be(expectedValueLiteral);
      });

      it('should have the property preCapture (base name: "pre_capture")', function() {
        // TODO: update the code to test the property preCapture
        expect(instance).to.have.property('preCapture');
        // expect(instance.preCapture).to.be(expectedValueLiteral);
      });

      it('should have the property installments (base name: "installments")', function() {
        // TODO: update the code to test the property installments
        expect(instance).to.have.property('installments');
        // expect(instance.installments).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtTimestamp (base name: "created_at_timestamp")', function() {
        // TODO: update the code to test the property createdAtTimestamp
        expect(instance).to.have.property('createdAtTimestamp');
        // expect(instance.createdAtTimestamp).to.be(expectedValueLiteral);
      });

      it('should have the property orderNumber (base name: "order_number")', function() {
        // TODO: update the code to test the property orderNumber
        expect(instance).to.have.property('orderNumber');
        // expect(instance.orderNumber).to.be(expectedValueLiteral);
      });

      it('should have the property sellerCode (base name: "seller_code")', function() {
        // TODO: update the code to test the property sellerCode
        expect(instance).to.have.property('sellerCode');
        // expect(instance.sellerCode).to.be(expectedValueLiteral);
      });

      it('should have the property cardBrand (base name: "card_brand")', function() {
        // TODO: update the code to test the property cardBrand
        expect(instance).to.have.property('cardBrand');
        // expect(instance.cardBrand).to.be(expectedValueLiteral);
      });

      it('should have the property competenceDate (base name: "competence_date")', function() {
        // TODO: update the code to test the property competenceDate
        expect(instance).to.have.property('competenceDate');
        // expect(instance.competenceDate).to.be(expectedValueLiteral);
      });

      it('should have the property paymentTypeId (base name: "payment_type_id")', function() {
        // TODO: update the code to test the property paymentTypeId
        expect(instance).to.have.property('paymentTypeId');
        // expect(instance.paymentTypeId).to.be(expectedValueLiteral);
      });

      it('should have the property paymentTypeCode (base name: "payment_type_code")', function() {
        // TODO: update the code to test the property paymentTypeCode
        expect(instance).to.have.property('paymentTypeCode');
        // expect(instance.paymentTypeCode).to.be(expectedValueLiteral);
      });

      it('should have the property eventCode (base name: "event_code")', function() {
        // TODO: update the code to test the property eventCode
        expect(instance).to.have.property('eventCode');
        // expect(instance.eventCode).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property formPayment (base name: "form_payment")', function() {
        // TODO: update the code to test the property formPayment
        expect(instance).to.have.property('formPayment');
        // expect(instance.formPayment).to.be(expectedValueLiteral);
      });

      it('should have the property isStandalone (base name: "is_standalone")', function() {
        // TODO: update the code to test the property isStandalone
        expect(instance).to.have.property('isStandalone');
        // expect(instance.isStandalone).to.be(expectedValueLiteral);
      });

    });
  });

}));
