/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ParcelaExpressApi);
  }
}(this, function(expect, ParcelaExpressApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetSaleDto', function() {
      beforeEach(function() {
        instance = new ParcelaExpressApi.GetSaleDto();
      });

      it('should create an instance of GetSaleDto', function() {
        // TODO: update the code to test GetSaleDto
        expect(instance).to.be.a(ParcelaExpressApi.GetSaleDto);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property protocol (base name: "protocol")', function() {
        // TODO: update the code to test the property protocol
        expect(instance).to.have.property('protocol');
        // expect(instance.protocol).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updated_at")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property originalAmount (base name: "original_amount")', function() {
        // TODO: update the code to test the property originalAmount
        expect(instance).to.have.property('originalAmount');
        // expect(instance.originalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property formattedType (base name: "formatted_type")', function() {
        // TODO: update the code to test the property formattedType
        expect(instance).to.have.property('formattedType');
        // expect(instance.formattedType).to.be(expectedValueLiteral);
      });

      it('should have the property formPayment (base name: "form_payment")', function() {
        // TODO: update the code to test the property formPayment
        expect(instance).to.have.property('formPayment');
        // expect(instance.formPayment).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property settlementDay (base name: "settlement_day")', function() {
        // TODO: update the code to test the property settlementDay
        expect(instance).to.have.property('settlementDay');
        // expect(instance.settlementDay).to.be(expectedValueLiteral);
      });

      it('should have the property settlementStatus (base name: "settlement_status")', function() {
        // TODO: update the code to test the property settlementStatus
        expect(instance).to.have.property('settlementStatus');
        // expect(instance.settlementStatus).to.be(expectedValueLiteral);
      });

      it('should have the property seller (base name: "seller")', function() {
        // TODO: update the code to test the property seller
        expect(instance).to.have.property('seller');
        // expect(instance.seller).to.be(expectedValueLiteral);
      });

      it('should have the property salePlan (base name: "sale_plan")', function() {
        // TODO: update the code to test the property salePlan
        expect(instance).to.have.property('salePlan');
        // expect(instance.salePlan).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "user")', function() {
        // TODO: update the code to test the property user
        expect(instance).to.have.property('user');
        // expect(instance.user).to.be(expectedValueLiteral);
      });

      it('should have the property paymentType (base name: "payment_type")', function() {
        // TODO: update the code to test the property paymentType
        expect(instance).to.have.property('paymentType');
        // expect(instance.paymentType).to.be(expectedValueLiteral);
      });

      it('should have the property payer (base name: "payer")', function() {
        // TODO: update the code to test the property payer
        expect(instance).to.have.property('payer');
        // expect(instance.payer).to.be(expectedValueLiteral);
      });

      it('should have the property billet (base name: "billet")', function() {
        // TODO: update the code to test the property billet
        expect(instance).to.have.property('billet');
        // expect(instance.billet).to.be(expectedValueLiteral);
      });

      it('should have the property paymentLink (base name: "payment_link")', function() {
        // TODO: update the code to test the property paymentLink
        expect(instance).to.have.property('paymentLink');
        // expect(instance.paymentLink).to.be(expectedValueLiteral);
      });

      it('should have the property splitRules (base name: "split_rules")', function() {
        // TODO: update the code to test the property splitRules
        expect(instance).to.have.property('splitRules');
        // expect(instance.splitRules).to.be(expectedValueLiteral);
      });

      it('should have the property hasSplitRules (base name: "has_split_rules")', function() {
        // TODO: update the code to test the property hasSplitRules
        expect(instance).to.have.property('hasSplitRules');
        // expect(instance.hasSplitRules).to.be(expectedValueLiteral);
      });

      it('should have the property formattedDescription (base name: "formatted_description")', function() {
        // TODO: update the code to test the property formattedDescription
        expect(instance).to.have.property('formattedDescription');
        // expect(instance.formattedDescription).to.be(expectedValueLiteral);
      });

      it('should have the property installments (base name: "installments")', function() {
        // TODO: update the code to test the property installments
        expect(instance).to.have.property('installments');
        // expect(instance.installments).to.be(expectedValueLiteral);
      });

      it('should have the property sellerName (base name: "seller_name")', function() {
        // TODO: update the code to test the property sellerName
        expect(instance).to.have.property('sellerName');
        // expect(instance.sellerName).to.be(expectedValueLiteral);
      });

      it('should have the property sellerDocument (base name: "seller_document")', function() {
        // TODO: update the code to test the property sellerDocument
        expect(instance).to.have.property('sellerDocument');
        // expect(instance.sellerDocument).to.be(expectedValueLiteral);
      });

      it('should have the property paymentTypeCode (base name: "payment_type_code")', function() {
        // TODO: update the code to test the property paymentTypeCode
        expect(instance).to.have.property('paymentTypeCode');
        // expect(instance.paymentTypeCode).to.be(expectedValueLiteral);
      });

      it('should have the property paymentTypeDescription (base name: "payment_type_description")', function() {
        // TODO: update the code to test the property paymentTypeDescription
        expect(instance).to.have.property('paymentTypeDescription');
        // expect(instance.paymentTypeDescription).to.be(expectedValueLiteral);
      });

      it('should have the property paymentTypeInstallments (base name: "payment_type_installments")', function() {
        // TODO: update the code to test the property paymentTypeInstallments
        expect(instance).to.have.property('paymentTypeInstallments');
        // expect(instance.paymentTypeInstallments).to.be(expectedValueLiteral);
      });

      it('should have the property payerName (base name: "payer_name")', function() {
        // TODO: update the code to test the property payerName
        expect(instance).to.have.property('payerName');
        // expect(instance.payerName).to.be(expectedValueLiteral);
      });

      it('should have the property payerEmail (base name: "payer_email")', function() {
        // TODO: update the code to test the property payerEmail
        expect(instance).to.have.property('payerEmail');
        // expect(instance.payerEmail).to.be(expectedValueLiteral);
      });

      it('should have the property payerDocument (base name: "payer_document")', function() {
        // TODO: update the code to test the property payerDocument
        expect(instance).to.have.property('payerDocument');
        // expect(instance.payerDocument).to.be(expectedValueLiteral);
      });

      it('should have the property payerAddress (base name: "payer_address")', function() {
        // TODO: update the code to test the property payerAddress
        expect(instance).to.have.property('payerAddress');
        // expect(instance.payerAddress).to.be(expectedValueLiteral);
      });

      it('should have the property salePlanName (base name: "sale_plan_name")', function() {
        // TODO: update the code to test the property salePlanName
        expect(instance).to.have.property('salePlanName');
        // expect(instance.salePlanName).to.be(expectedValueLiteral);
      });

      it('should have the property createdByUserName (base name: "created_by_user_name")', function() {
        // TODO: update the code to test the property createdByUserName
        expect(instance).to.have.property('createdByUserName');
        // expect(instance.createdByUserName).to.be(expectedValueLiteral);
      });

      it('should have the property createdByUserEmail (base name: "created_by_user_email")', function() {
        // TODO: update the code to test the property createdByUserEmail
        expect(instance).to.have.property('createdByUserEmail');
        // expect(instance.createdByUserEmail).to.be(expectedValueLiteral);
      });

      it('should have the property preCapture (base name: "pre_capture")', function() {
        // TODO: update the code to test the property preCapture
        expect(instance).to.have.property('preCapture');
        // expect(instance.preCapture).to.be(expectedValueLiteral);
      });

      it('should have the property settlementDayCancellation (base name: "settlement_day_cancellation")', function() {
        // TODO: update the code to test the property settlementDayCancellation
        expect(instance).to.have.property('settlementDayCancellation');
        // expect(instance.settlementDayCancellation).to.be(expectedValueLiteral);
      });

      it('should have the property settlementStatusCancellation (base name: "settlement_status_cancellation")', function() {
        // TODO: update the code to test the property settlementStatusCancellation
        expect(instance).to.have.property('settlementStatusCancellation');
        // expect(instance.settlementStatusCancellation).to.be(expectedValueLiteral);
      });

      it('should have the property paymentDay (base name: "payment_day")', function() {
        // TODO: update the code to test the property paymentDay
        expect(instance).to.have.property('paymentDay');
        // expect(instance.paymentDay).to.be(expectedValueLiteral);
      });

      it('should have the property fee (base name: "fee")', function() {
        // TODO: update the code to test the property fee
        expect(instance).to.have.property('fee');
        // expect(instance.fee).to.be(expectedValueLiteral);
      });

      it('should have the property orderNumber (base name: "order_number")', function() {
        // TODO: update the code to test the property orderNumber
        expect(instance).to.have.property('orderNumber');
        // expect(instance.orderNumber).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property cardNumber (base name: "card_number")', function() {
        // TODO: update the code to test the property cardNumber
        expect(instance).to.have.property('cardNumber');
        // expect(instance.cardNumber).to.be(expectedValueLiteral);
      });

      it('should have the property cardBrand (base name: "card_brand")', function() {
        // TODO: update the code to test the property cardBrand
        expect(instance).to.have.property('cardBrand');
        // expect(instance.cardBrand).to.be(expectedValueLiteral);
      });

      it('should have the property cardHolderName (base name: "card_holder_name")', function() {
        // TODO: update the code to test the property cardHolderName
        expect(instance).to.have.property('cardHolderName');
        // expect(instance.cardHolderName).to.be(expectedValueLiteral);
      });

    });
  });

}));
