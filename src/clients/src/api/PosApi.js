/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse200} from '../model/InlineResponse200';
import {UpdateSellerPosDto} from '../model/UpdateSellerPosDto';

/**
* Pos service.
* @module api/PosApi
* @version 1.0
*/
export class PosApi {

    /**
    * Constructs a new PosApi. 
    * @alias module:api/PosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the listPos operation.
     * @callback moduleapi/PosApi~listPosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar as m√°quinas de todos os estabelecimentos
     * @param {Number} limit 
     * @param {Number} currentPage 
     * @param {module:model/String} status 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to <.>)
     * @param {module:api/PosApi~listPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listPos(limit, currentPage, status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listPos");
      }
      // verify the required parameter 'currentPage' is set
      if (currentPage === undefined || currentPage === null) {
        throw new Error("Missing the required parameter 'currentPage' when calling listPos");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling listPos");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'limit': limit,'current_page': currentPage,'sort': opts['sort'],'status': status
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/pos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateBackofficePos operation.
     * @callback moduleapi/PosApi~updateBackofficePosCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar pos via backoffice
     * @param {module:model/UpdateSellerPosDto} body 
     * @param {String} posId 
     * @param {module:api/PosApi~updateBackofficePosCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBackofficePos(body, posId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBackofficePos");
      }
      // verify the required parameter 'posId' is set
      if (posId === undefined || posId === null) {
        throw new Error("Missing the required parameter 'posId' when calling updateBackofficePos");
      }

      let pathParams = {
        'posId': posId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/pos/{posId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}