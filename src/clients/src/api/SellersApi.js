/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CreatePayerDto} from '../model/CreatePayerDto';
import {CreateSaleAutoGeneratePaymentLinkDto} from '../model/CreateSaleAutoGeneratePaymentLinkDto';
import {CreateSaleDto} from '../model/CreateSaleDto';
import {CreateSellerDto} from '../model/CreateSellerDto';
import {CreateSellerPosDto} from '../model/CreateSellerPosDto';
import {CreateSellerUserDto} from '../model/CreateSellerUserDto';
import {EditSellerDto} from '../model/EditSellerDto';
import {GetAcquirerDto} from '../model/GetAcquirerDto';
import {GetBilletDto} from '../model/GetBilletDto';
import {GetLogoDto} from '../model/GetLogoDto';
import {GetMerchantSellerDto} from '../model/GetMerchantSellerDto';
import {GetPayerDto} from '../model/GetPayerDto';
import {GetSaleDto} from '../model/GetSaleDto';
import {GetSaleSummaryChartDto} from '../model/GetSaleSummaryChartDto';
import {GetSaleSummaryDto} from '../model/GetSaleSummaryDto';
import {GetSellerAcceptedPaymentMethodsDto} from '../model/GetSellerAcceptedPaymentMethodsDto';
import {GetSellerDto} from '../model/GetSellerDto';
import {GetSellerPosDto} from '../model/GetSellerPosDto';
import {GetSellerSaleAutoGeneratePaymentLinkDto} from '../model/GetSellerSaleAutoGeneratePaymentLinkDto';
import {GetSellerSaleDto} from '../model/GetSellerSaleDto';
import {GetSellerUserDto} from '../model/GetSellerUserDto';
import {IncludeAcquirerDto} from '../model/IncludeAcquirerDto';
import {IncludeSalePlanDto} from '../model/IncludeSalePlanDto';
import {InlineResponse200} from '../model/InlineResponse200';
import {UpdateSellerThemeDto} from '../model/UpdateSellerThemeDto';
import {UpdateSellerUserDto} from '../model/UpdateSellerUserDto';

/**
* Sellers service.
* @module api/SellersApi
* @version 1.0
*/
export class SellersApi {

    /**
    * Constructs a new SellersApi. 
    * @alias module:api/SellersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addAcquirer operation.
     * @callback moduleapi/SellersApi~addAcquirerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associar uma adquirente a um estabelecimento
     * @param {module:model/IncludeAcquirerDto} body 
     * @param {String} sellerId 
     * @param {module:api/SellersApi~addAcquirerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addAcquirer(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addAcquirer");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling addAcquirer");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/acquirers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the addSalePlan operation.
     * @callback moduleapi/SellersApi~addSalePlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associar um plano de vendas a um estabelecimento
     * @param {module:model/IncludeSalePlanDto} body 
     * @param {String} sellerId 
     * @param {module:api/SellersApi~addSalePlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addSalePlan(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addSalePlan");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling addSalePlan");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales-plans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createSaleAutoGenerateLinkPayment operation.
     * @callback moduleapi/SellersApi~createSaleAutoGenerateLinkPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerSaleAutoGeneratePaymentLinkDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gerar uma venda com status pendente para um estabelecimento pelo link auto ger√°vel
     * @param {module:model/CreateSaleAutoGeneratePaymentLinkDto} body 
     * @param {String} sellerId 
     * @param {module:api/SellersApi~createSaleAutoGenerateLinkPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createSaleAutoGenerateLinkPayment(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSaleAutoGenerateLinkPayment");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createSaleAutoGenerateLinkPayment");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerSaleAutoGeneratePaymentLinkDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales/payment-link-auto', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createSeller operation.
     * @callback moduleapi/SellersApi~createSellerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar estabelecimento
     * @param {module:model/CreateSellerDto} body 
     * @param {module:api/SellersApi~createSellerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createSeller(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSeller");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerDto;

      return this.apiClient.callApi(
        '/v1/sellers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createSellerPayer operation.
     * @callback moduleapi/SellersApi~createSellerPayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePayerDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar pagador do estabelecimento
     * @param {module:model/CreatePayerDto} body 
     * @param {String} sellerId 
     * @param {module:api/SellersApi~createSellerPayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createSellerPayer(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSellerPayer");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createSellerPayer");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePayerDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/payers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createSellerPos operation.
     * @callback moduleapi/SellersApi~createSellerPosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerPosDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Incluir um POS em um estabelecimento
     * @param {module:model/CreateSellerPosDto} body 
     * @param {String} sellerId 
     * @param {module:api/SellersApi~createSellerPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createSellerPos(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSellerPos");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createSellerPos");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerPosDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/pos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createSellerSale operation.
     * @callback moduleapi/SellersApi~createSellerSaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerSaleDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Realizar venda para um estabelecimento
     * @param {module:model/CreateSaleDto} body 
     * @param {String} sellerId 
     * @param {module:api/SellersApi~createSellerSaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createSellerSale(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSellerSale");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createSellerSale");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerSaleDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createSellerUser operation.
     * @callback moduleapi/SellersApi~createSellerUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerUserDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar usu√°rio do estabelecimento
     * @param {module:model/CreateSellerUserDto} body 
     * @param {String} sellerId 
     * @param {module:api/SellersApi~createSellerUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createSellerUser(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSellerUser");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createSellerUser");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerUserDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the editSeller operation.
     * @callback moduleapi/SellersApi~editSellerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Editar estabelecimento
     * @param {module:model/EditSellerDto} body 
     * @param {String} sellerId 
     * @param {module:api/SellersApi~editSellerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editSeller(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling editSeller");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling editSeller");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAcceptedPaymentMethodsBySellerId operation.
     * @callback moduleapi/SellersApi~getAcceptedPaymentMethodsBySellerIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerAcceptedPaymentMethodsDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar os m√©todos de pagamento aceito pelo estabelecimento
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.valueCents 
     * @param {module:api/SellersApi~getAcceptedPaymentMethodsBySellerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAcceptedPaymentMethodsBySellerId(sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getAcceptedPaymentMethodsBySellerId");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'valueCents': opts['valueCents']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSellerAcceptedPaymentMethodsDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/accepted-payment-methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllSellerSalesSummaryChart operation.
     * @callback moduleapi/SellersApi~getAllSellerSalesSummaryChartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSaleSummaryChartDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar resumo dos ultimos 6 meses de um Estabelecimentos
     * @param {String} sellerId 
     * @param {module:api/SellersApi~getAllSellerSalesSummaryChartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllSellerSalesSummaryChart(sellerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getAllSellerSalesSummaryChart");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSaleSummaryChartDto;

      return this.apiClient.callApi(
        '/v1/sellers/summary-chart/{sellerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSeller operation.
     * @callback moduleapi/SellersApi~getSellerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar os dados do estabelecimento informado
     * @param {String} sellerId 
     * @param {module:api/SellersApi~getSellerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSeller(sellerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSeller");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSellerDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSellerByCode operation.
     * @callback moduleapi/SellersApi~getSellerByCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar os dados do estabelecimento informado pelo c√≥digo
     * @param {String} codeId 
     * @param {module:api/SellersApi~getSellerByCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSellerByCode(codeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'codeId' is set
      if (codeId === undefined || codeId === null) {
        throw new Error("Missing the required parameter 'codeId' when calling getSellerByCode");
      }

      let pathParams = {
        'codeId': codeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSellerDto;

      return this.apiClient.callApi(
        '/v1/sellers/code/{codeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSellerPos operation.
     * @callback moduleapi/SellersApi~getSellerPosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerPosDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar os dados do POS informado
     * @param {String} sellerId 
     * @param {String} sellerPosId 
     * @param {module:api/SellersApi~getSellerPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSellerPos(sellerId, sellerPosId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSellerPos");
      }
      // verify the required parameter 'sellerPosId' is set
      if (sellerPosId === undefined || sellerPosId === null) {
        throw new Error("Missing the required parameter 'sellerPosId' when calling getSellerPos");
      }

      let pathParams = {
        'sellerId': sellerId,'sellerPosId': sellerPosId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSellerPosDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/pos/{sellerPosId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSellerSale operation.
     * @callback moduleapi/SellersApi~getSellerSaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSaleDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar a venda informada
     * @param {String} sellerId 
     * @param {String} saleId 
     * @param {module:api/SellersApi~getSellerSaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSellerSale(sellerId, saleId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSellerSale");
      }
      // verify the required parameter 'saleId' is set
      if (saleId === undefined || saleId === null) {
        throw new Error("Missing the required parameter 'saleId' when calling getSellerSale");
      }

      let pathParams = {
        'sellerId': sellerId,'saleId': saleId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSaleDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales/{saleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSellerSaleBillet operation.
     * @callback moduleapi/SellersApi~getSellerSaleBilletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBilletDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar o boleto da venda informada
     * @param {String} sellerId 
     * @param {String} saleId 
     * @param {module:api/SellersApi~getSellerSaleBilletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSellerSaleBillet(sellerId, saleId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSellerSaleBillet");
      }
      // verify the required parameter 'saleId' is set
      if (saleId === undefined || saleId === null) {
        throw new Error("Missing the required parameter 'saleId' when calling getSellerSaleBillet");
      }

      let pathParams = {
        'sellerId': sellerId,'saleId': saleId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBilletDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales/{saleId}/billets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSellerSalesSummary operation.
     * @callback moduleapi/SellersApi~getSellerSalesSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSaleSummaryDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar o resumo de todas as vendas de um estabelecimento
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate 
     * @param {String} opts.endDate 
     * @param {module:model/String} opts.status 
     * @param {module:api/SellersApi~getSellerSalesSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSellerSalesSummary(sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSellerSalesSummary");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'startDate': opts['startDate'],'endDate': opts['endDate'],'status': opts['status']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSaleSummaryDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listMerchantSellers operation.
     * @callback moduleapi/SellersApi~listMerchantSellersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetMerchantSellerDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os sellers do mesmo merchant
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.text 
     * @param {module:api/SellersApi~listMerchantSellersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listMerchantSellers(sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listMerchantSellers");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'text': opts['text']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetMerchantSellerDto];

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/list-sellers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSellerAcquirers operation.
     * @callback moduleapi/SellersApi~listSellerAcquirersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetAcquirerDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar as adquirentes do estabelecimento informado
     * @param {String} sellerId 
     * @param {module:api/SellersApi~listSellerAcquirersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSellerAcquirers(sellerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerAcquirers");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetAcquirerDto];

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/acquirers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSellerPaginatedPos operation.
     * @callback moduleapi/SellersApi~listSellerPaginatedPosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os POS de um estabelecimento paginado
     * @param {Number} limit 
     * @param {Number} currentPage 
     * @param {module:model/String} status 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to <.>)
     * @param {module:api/SellersApi~listSellerPaginatedPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSellerPaginatedPos(limit, currentPage, status, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerPaginatedPos");
      }
      // verify the required parameter 'currentPage' is set
      if (currentPage === undefined || currentPage === null) {
        throw new Error("Missing the required parameter 'currentPage' when calling listSellerPaginatedPos");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling listSellerPaginatedPos");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerPaginatedPos");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'limit': limit,'current_page': currentPage,'sort': opts['sort'],'status': status
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/paginated/pos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSellerPayer operation.
     * @callback moduleapi/SellersApi~listSellerPayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPayerDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar um pagador do estabelecimento
     * @param {String} payerDocument 
     * @param {module:api/SellersApi~listSellerPayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSellerPayer(payerDocument, callback) {
      
      let postBody = null;
      // verify the required parameter 'payerDocument' is set
      if (payerDocument === undefined || payerDocument === null) {
        throw new Error("Missing the required parameter 'payerDocument' when calling listSellerPayer");
      }

      let pathParams = {
        'payerDocument': payerDocument
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPayerDto;

      return this.apiClient.callApi(
        '/v1/sellers/payers/{payerDocument}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSellerPayers operation.
     * @callback moduleapi/SellersApi~listSellerPayersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar pagadores do estabelecimento
     * @param {Number} limit 
     * @param {Number} currentPage 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to <.>)
     * @param {String} opts.name 
     * @param {String} opts.document 
     * @param {module:api/SellersApi~listSellerPayersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSellerPayers(limit, currentPage, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerPayers");
      }
      // verify the required parameter 'currentPage' is set
      if (currentPage === undefined || currentPage === null) {
        throw new Error("Missing the required parameter 'currentPage' when calling listSellerPayers");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerPayers");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'limit': limit,'current_page': currentPage,'sort': opts['sort'],'name': opts['name'],'document': opts['document']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/payers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSellerPaymentLinks operation.
     * @callback moduleapi/SellersApi~listSellerPaymentLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os links de pagamento do estabelecimento informado
     * @param {Number} limit 
     * @param {Number} currentPage 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Formato: yyyy-mm-dd
     * @param {String} opts.endDate Formato: yyyy-mm-dd
     * @param {String} opts.id 
     * @param {String} opts.email 
     * @param {Array.<module:model/String>} opts.status 
     * @param {Array.<module:model/String>} opts.formPayment 
     * @param {module:api/SellersApi~listSellerPaymentLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSellerPaymentLinks(limit, currentPage, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerPaymentLinks");
      }
      // verify the required parameter 'currentPage' is set
      if (currentPage === undefined || currentPage === null) {
        throw new Error("Missing the required parameter 'currentPage' when calling listSellerPaymentLinks");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerPaymentLinks");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'start_date': opts['startDate'],'end_date': opts['endDate'],'limit': limit,'current_page': currentPage,'id': opts['id'],'email': opts['email'],'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),'form_payment': this.apiClient.buildCollectionParam(opts['formPayment'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/payment-links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSellerPos operation.
     * @callback moduleapi/SellersApi~listSellerPosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetSellerPosDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os POS de um estabelecimento
     * @param {String} sellerId 
     * @param {module:api/SellersApi~listSellerPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSellerPos(sellerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerPos");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetSellerPosDto];

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/pos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSellerProtestLinks operation.
     * @callback moduleapi/SellersApi~listSellerProtestLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os links de protesto do estabelecimento informado
     * @param {Number} limit 
     * @param {Number} currentPage 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Formato: yyyy-mm-dd
     * @param {String} opts.endDate Formato: yyyy-mm-dd
     * @param {String} opts.id 
     * @param {String} opts.email 
     * @param {Array.<module:model/String>} opts.status 
     * @param {Array.<module:model/String>} opts.formPayment 
     * @param {module:api/SellersApi~listSellerProtestLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSellerProtestLinks(limit, currentPage, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerProtestLinks");
      }
      // verify the required parameter 'currentPage' is set
      if (currentPage === undefined || currentPage === null) {
        throw new Error("Missing the required parameter 'currentPage' when calling listSellerProtestLinks");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerProtestLinks");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'start_date': opts['startDate'],'end_date': opts['endDate'],'limit': limit,'current_page': currentPage,'id': opts['id'],'email': opts['email'],'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),'form_payment': this.apiClient.buildCollectionParam(opts['formPayment'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/protest-links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSellerSales operation.
     * @callback moduleapi/SellersApi~listSellerSalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar vendas de um estabelecimento
     * @param {Number} limit 
     * @param {Number} currentPage 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Formato: yyyy-mm-dd
     * @param {String} opts.endDate Formato: yyyy-mm-dd
     * @param {module:model/String} opts.sort  (default to <.>)
     * @param {String} opts.id 
     * @param {Array.<module:model/String>} opts.status 
     * @param {String} opts.description 
     * @param {Number} opts.amount 
     * @param {Number} opts.originalAmount 
     * @param {Array.<module:model/String>} opts.type 
     * @param {String} opts.name 
     * @param {String} opts.user 
     * @param {Array.<module:model/String>} opts.formPayment 
     * @param {Number} opts.lastNumberSales 
     * @param {module:api/SellersApi~listSellerSalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSellerSales(limit, currentPage, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerSales");
      }
      // verify the required parameter 'currentPage' is set
      if (currentPage === undefined || currentPage === null) {
        throw new Error("Missing the required parameter 'currentPage' when calling listSellerSales");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerSales");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'startDate': opts['startDate'],'endDate': opts['endDate'],'limit': limit,'current_page': currentPage,'sort': opts['sort'],'id': opts['id'],'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),'description': opts['description'],'amount': opts['amount'],'original_amount': opts['originalAmount'],'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),'name': opts['name'],'user': opts['user'],'form_payment': this.apiClient.buildCollectionParam(opts['formPayment'], 'multi'),'last_number_sales': opts['lastNumberSales']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSellerUsers operation.
     * @callback moduleapi/SellersApi~listSellerUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os usu√°rios do estabelecimento
     * @param {Number} limit 
     * @param {Number} currentPage 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to <.>)
     * @param {module:api/SellersApi~listSellerUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSellerUsers(limit, currentPage, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerUsers");
      }
      // verify the required parameter 'currentPage' is set
      if (currentPage === undefined || currentPage === null) {
        throw new Error("Missing the required parameter 'currentPage' when calling listSellerUsers");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerUsers");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'limit': limit,'current_page': currentPage,'sort': opts['sort']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSellers operation.
     * @callback moduleapi/SellersApi~listSellersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar estabelecimentos
     * @param {Number} limit 
     * @param {Number} currentPage 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to <.>)
     * @param {String} opts.text 
     * @param {Array.<module:model/String>} opts.status 
     * @param {String} opts.document 
     * @param {String} opts.name 
     * @param {String} opts.sellerId 
     * @param {module:model/String} opts.billetProvider 
     * @param {module:api/SellersApi~listSellersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSellers(limit, currentPage, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellers");
      }
      // verify the required parameter 'currentPage' is set
      if (currentPage === undefined || currentPage === null) {
        throw new Error("Missing the required parameter 'currentPage' when calling listSellers");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'limit': limit,'current_page': currentPage,'sort': opts['sort'],'text': opts['text'],'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),'document': opts['document'],'name': opts['name'],'sellerId': opts['sellerId'],'billet_provider': opts['billetProvider']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/sellers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateSellerTheme operation.
     * @callback moduleapi/SellersApi~updateSellerThemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar o tema do estabelecimento
     * @param {module:model/UpdateSellerThemeDto} body 
     * @param {String} sellerId 
     * @param {module:api/SellersApi~updateSellerThemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSellerTheme(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSellerTheme");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling updateSellerTheme");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/theme', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateSellerUser operation.
     * @callback moduleapi/SellersApi~updateSellerUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerUserDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar um usu√°rio do estabelecimento
     * @param {module:model/UpdateSellerUserDto} body 
     * @param {String} sellerId 
     * @param {String} userId 
     * @param {module:api/SellersApi~updateSellerUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateSellerUser(body, sellerId, userId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSellerUser");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling updateSellerUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateSellerUser");
      }

      let pathParams = {
        'sellerId': sellerId,'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerUserDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/users/{userId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the uploadSellerLogo operation.
     * @callback moduleapi/SellersApi~uploadSellerLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLogoDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Realizar upload da logo do estabelecimento
     * @param {Blob} file 
     * @param {String} sellerId 
     * @param {module:api/SellersApi~uploadSellerLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    uploadSellerLogo(file, sellerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadSellerLogo");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling uploadSellerLogo");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GetLogoDto;

      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}