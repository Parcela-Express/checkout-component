/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelPaymentDTO from '../model/CancelPaymentDTO';
import CancelPaymentResponseDTO from '../model/CancelPaymentResponseDTO';
import CapturePaymentDto from '../model/CapturePaymentDto';
import CreateDebitPaymentResponseDTO from '../model/CreateDebitPaymentResponseDTO';
import CreatePaymentDto from '../model/CreatePaymentDto';
import CreatePaymentResponseDTO from '../model/CreatePaymentResponseDTO';
import CreatePaymentV3Dto from '../model/CreatePaymentV3Dto';
import CreatePaymentWithSplitDto from '../model/CreatePaymentWithSplitDto';
import CreatePixPaymentDto from '../model/CreatePixPaymentDto';
import CreatePixPaymentResponseDTO from '../model/CreatePixPaymentResponseDTO';
import CreatePixPaymentWithSplitDto from '../model/CreatePixPaymentWithSplitDto';
import CreatePixPaymentWithSplitInternalDto from '../model/CreatePixPaymentWithSplitInternalDto';
import CreatePixPaymentWithSplitResponseDTO from '../model/CreatePixPaymentWithSplitResponseDTO';
import GetSaleDto from '../model/GetSaleDto';
import PaymentDetailsDTO from '../model/PaymentDetailsDTO';

/**
* Payments service.
* @module api/PaymentsApi
* @version 1.0
*/
export default class PaymentsApi {

    /**
    * Constructs a new PaymentsApi. 
    * @alias module:api/PaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the capturePayment operation.
     * @callback module:api/PaymentsApi~capturePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSaleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Capturar pagamento
     * @param {String} seller_id 
     * @param {String} sale_id 
     * @param {module:model/CapturePaymentDto} CapturePaymentDto 
     * @param {module:api/PaymentsApi~capturePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSaleDto}
     */
    capturePayment(seller_id, sale_id, CapturePaymentDto, callback) {
      let postBody = CapturePaymentDto;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling capturePayment");
      }
      // verify the required parameter 'sale_id' is set
      if (sale_id === undefined || sale_id === null) {
        throw new Error("Missing the required parameter 'sale_id' when calling capturePayment");
      }
      // verify the required parameter 'CapturePaymentDto' is set
      if (CapturePaymentDto === undefined || CapturePaymentDto === null) {
        throw new Error("Missing the required parameter 'CapturePaymentDto' when calling capturePayment");
      }

      let pathParams = {
        'seller_id': seller_id,
        'sale_id': sale_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSaleDto;
      return this.apiClient.callApi(
        '/v1/payments/sellers/{seller_id}/sales/{sale_id}/capture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayment operation.
     * @callback module:api/PaymentsApi~createPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePaymentResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo pagamento
     * @param {String} seller_id 
     * @param {module:model/CreatePaymentDto} CreatePaymentDto 
     * @param {module:api/PaymentsApi~createPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePaymentResponseDTO}
     */
    createPayment(seller_id, CreatePaymentDto, callback) {
      let postBody = CreatePaymentDto;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling createPayment");
      }
      // verify the required parameter 'CreatePaymentDto' is set
      if (CreatePaymentDto === undefined || CreatePaymentDto === null) {
        throw new Error("Missing the required parameter 'CreatePaymentDto' when calling createPayment");
      }

      let pathParams = {
        'seller_id': seller_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePaymentResponseDTO;
      return this.apiClient.callApi(
        '/v1/payments/sellers/{seller_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPaymentV3 operation.
     * @callback module:api/PaymentsApi~createPaymentV3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePaymentResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo pagamento
     * @param {String} seller_id 
     * @param {module:model/CreatePaymentV3Dto} CreatePaymentV3Dto 
     * @param {module:api/PaymentsApi~createPaymentV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePaymentResponseDTO}
     */
    createPaymentV3(seller_id, CreatePaymentV3Dto, callback) {
      let postBody = CreatePaymentV3Dto;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling createPaymentV3");
      }
      // verify the required parameter 'CreatePaymentV3Dto' is set
      if (CreatePaymentV3Dto === undefined || CreatePaymentV3Dto === null) {
        throw new Error("Missing the required parameter 'CreatePaymentV3Dto' when calling createPaymentV3");
      }

      let pathParams = {
        'seller_id': seller_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePaymentResponseDTO;
      return this.apiClient.callApi(
        '/v3/payments/sellers/{seller_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPaymentWithSplit operation.
     * @callback module:api/PaymentsApi~createPaymentWithSplitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePaymentResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo pagamento online
     * @param {String} seller_id 
     * @param {module:model/CreatePaymentWithSplitDto} CreatePaymentWithSplitDto 
     * @param {module:api/PaymentsApi~createPaymentWithSplitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePaymentResponseDTO}
     */
    createPaymentWithSplit(seller_id, CreatePaymentWithSplitDto, callback) {
      let postBody = CreatePaymentWithSplitDto;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling createPaymentWithSplit");
      }
      // verify the required parameter 'CreatePaymentWithSplitDto' is set
      if (CreatePaymentWithSplitDto === undefined || CreatePaymentWithSplitDto === null) {
        throw new Error("Missing the required parameter 'CreatePaymentWithSplitDto' when calling createPaymentWithSplit");
      }

      let pathParams = {
        'seller_id': seller_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePaymentResponseDTO;
      return this.apiClient.callApi(
        '/v2/payments/sellers/{seller_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPaymentWithSplitInternal operation.
     * @callback module:api/PaymentsApi~createPaymentWithSplitInternalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePaymentResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo pagamento online
     * @param {String} seller_id 
     * @param {module:model/CreatePaymentWithSplitDto} CreatePaymentWithSplitDto 
     * @param {module:api/PaymentsApi~createPaymentWithSplitInternalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePaymentResponseDTO}
     */
    createPaymentWithSplitInternal(seller_id, CreatePaymentWithSplitDto, callback) {
      let postBody = CreatePaymentWithSplitDto;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling createPaymentWithSplitInternal");
      }
      // verify the required parameter 'CreatePaymentWithSplitDto' is set
      if (CreatePaymentWithSplitDto === undefined || CreatePaymentWithSplitDto === null) {
        throw new Error("Missing the required parameter 'CreatePaymentWithSplitDto' when calling createPaymentWithSplitInternal");
      }

      let pathParams = {
        'seller_id': seller_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePaymentResponseDTO;
      return this.apiClient.callApi(
        '/v2/payments/sellers/{seller_id}/internal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPixPayment operation.
     * @callback module:api/PaymentsApi~createPixPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePixPaymentResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar um pagamento usando Pix
     * @param {String} seller_id 
     * @param {module:model/CreatePixPaymentDto} CreatePixPaymentDto 
     * @param {module:api/PaymentsApi~createPixPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePixPaymentResponseDTO}
     */
    createPixPayment(seller_id, CreatePixPaymentDto, callback) {
      let postBody = CreatePixPaymentDto;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling createPixPayment");
      }
      // verify the required parameter 'CreatePixPaymentDto' is set
      if (CreatePixPaymentDto === undefined || CreatePixPaymentDto === null) {
        throw new Error("Missing the required parameter 'CreatePixPaymentDto' when calling createPixPayment");
      }

      let pathParams = {
        'seller_id': seller_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePixPaymentResponseDTO;
      return this.apiClient.callApi(
        '/v1/payments/sellers/{seller_id}/pix', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPixPaymentInternalWithSplits operation.
     * @callback module:api/PaymentsApi~createPixPaymentInternalWithSplitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePixPaymentWithSplitResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar um pagamento usando Pix
     * @param {String} seller_id 
     * @param {module:model/CreatePixPaymentWithSplitInternalDto} CreatePixPaymentWithSplitInternalDto 
     * @param {module:api/PaymentsApi~createPixPaymentInternalWithSplitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePixPaymentWithSplitResponseDTO}
     */
    createPixPaymentInternalWithSplits(seller_id, CreatePixPaymentWithSplitInternalDto, callback) {
      let postBody = CreatePixPaymentWithSplitInternalDto;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling createPixPaymentInternalWithSplits");
      }
      // verify the required parameter 'CreatePixPaymentWithSplitInternalDto' is set
      if (CreatePixPaymentWithSplitInternalDto === undefined || CreatePixPaymentWithSplitInternalDto === null) {
        throw new Error("Missing the required parameter 'CreatePixPaymentWithSplitInternalDto' when calling createPixPaymentInternalWithSplits");
      }

      let pathParams = {
        'seller_id': seller_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePixPaymentWithSplitResponseDTO;
      return this.apiClient.callApi(
        '/v2/payments/sellers/{seller_id}/pix/internal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPixPaymentWithSplits operation.
     * @callback module:api/PaymentsApi~createPixPaymentWithSplitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePixPaymentWithSplitResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar um pagamento usando Pix
     * @param {String} seller_id 
     * @param {module:model/CreatePixPaymentWithSplitDto} CreatePixPaymentWithSplitDto 
     * @param {module:api/PaymentsApi~createPixPaymentWithSplitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePixPaymentWithSplitResponseDTO}
     */
    createPixPaymentWithSplits(seller_id, CreatePixPaymentWithSplitDto, callback) {
      let postBody = CreatePixPaymentWithSplitDto;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling createPixPaymentWithSplits");
      }
      // verify the required parameter 'CreatePixPaymentWithSplitDto' is set
      if (CreatePixPaymentWithSplitDto === undefined || CreatePixPaymentWithSplitDto === null) {
        throw new Error("Missing the required parameter 'CreatePixPaymentWithSplitDto' when calling createPixPaymentWithSplits");
      }

      let pathParams = {
        'seller_id': seller_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePixPaymentWithSplitResponseDTO;
      return this.apiClient.callApi(
        '/v2/payments/sellers/{seller_id}/pix', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentDetails operation.
     * @callback module:api/PaymentsApi~paymentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDebitPaymentResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verificar detalhes de pagamento
     * @param {String} seller_id 
     * @param {String} sale_id 
     * @param {module:model/PaymentDetailsDTO} PaymentDetailsDTO 
     * @param {module:api/PaymentsApi~paymentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDebitPaymentResponseDTO}
     */
    paymentDetails(seller_id, sale_id, PaymentDetailsDTO, callback) {
      let postBody = PaymentDetailsDTO;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling paymentDetails");
      }
      // verify the required parameter 'sale_id' is set
      if (sale_id === undefined || sale_id === null) {
        throw new Error("Missing the required parameter 'sale_id' when calling paymentDetails");
      }
      // verify the required parameter 'PaymentDetailsDTO' is set
      if (PaymentDetailsDTO === undefined || PaymentDetailsDTO === null) {
        throw new Error("Missing the required parameter 'PaymentDetailsDTO' when calling paymentDetails");
      }

      let pathParams = {
        'seller_id': seller_id,
        'sale_id': sale_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDebitPaymentResponseDTO;
      return this.apiClient.callApi(
        '/v1/payments/sellers/{seller_id}/details/sale/{sale_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsControllerCancelPayment operation.
     * @callback module:api/PaymentsApi~paymentsControllerCancelPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelPaymentResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancelar um pagamento
     * @param {String} seller_id 
     * @param {String} sale_id 
     * @param {module:model/CancelPaymentDTO} CancelPaymentDTO 
     * @param {module:api/PaymentsApi~paymentsControllerCancelPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelPaymentResponseDTO}
     */
    paymentsControllerCancelPayment(seller_id, sale_id, CancelPaymentDTO, callback) {
      let postBody = CancelPaymentDTO;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling paymentsControllerCancelPayment");
      }
      // verify the required parameter 'sale_id' is set
      if (sale_id === undefined || sale_id === null) {
        throw new Error("Missing the required parameter 'sale_id' when calling paymentsControllerCancelPayment");
      }
      // verify the required parameter 'CancelPaymentDTO' is set
      if (CancelPaymentDTO === undefined || CancelPaymentDTO === null) {
        throw new Error("Missing the required parameter 'CancelPaymentDTO' when calling paymentsControllerCancelPayment");
      }

      let pathParams = {
        'seller_id': seller_id,
        'sale_id': sale_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelPaymentResponseDTO;
      return this.apiClient.callApi(
        '/v1/payments/sellers/{seller_id}/sales/{sale_id}/void', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
