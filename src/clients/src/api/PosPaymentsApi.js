/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CancelSalePos} from '../model/CancelSalePos';
import {PaymentPosRequest} from '../model/PaymentPosRequest';
import {PaymentPosRequestDTOV2} from '../model/PaymentPosRequestDTOV2';

/**
* PosPayments service.
* @module api/PosPaymentsApi
* @version 1.0
*/
export class PosPaymentsApi {

    /**
    * Constructs a new PosPaymentsApi. 
    * @alias module:api/PosPaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the posControllerCancelPayment operation.
     * @callback moduleapi/PosPaymentsApi~posControllerCancelPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancelar uma venda via Pos
     * @param {module:model/CancelSalePos} body 
     * @param {String} sellerId 
     * @param {module:api/PosPaymentsApi~posControllerCancelPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    posControllerCancelPayment(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling posControllerCancelPayment");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling posControllerCancelPayment");
      }

      let pathParams = {
        'seller_id': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/pos/cancel_sale/{seller_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the posControllerPaymentsRequest operation.
     * @callback moduleapi/PosPaymentsApi~posControllerPaymentsRequestCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo pagamento via Pos
     * @param {module:model/PaymentPosRequest} body 
     * @param {String} sellerId 
     * @param {module:api/PosPaymentsApi~posControllerPaymentsRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    posControllerPaymentsRequest(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling posControllerPaymentsRequest");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling posControllerPaymentsRequest");
      }

      let pathParams = {
        'seller_id': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/v1/pos/payments/{seller_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the posControllerV2PaymentsRequestWithSplit operation.
     * @callback moduleapi/PosPaymentsApi~posControllerV2PaymentsRequestWithSplitCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo pagamento via Pos
     * @param {module:model/PaymentPosRequestDTOV2} body 
     * @param {String} sellerId 
     * @param {module:api/PosPaymentsApi~posControllerV2PaymentsRequestWithSplitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    posControllerV2PaymentsRequestWithSplit(body, sellerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling posControllerV2PaymentsRequestWithSplit");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling posControllerV2PaymentsRequestWithSplit");
      }

      let pathParams = {
        'seller_id': sellerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/v2/pos/payments/{seller_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}