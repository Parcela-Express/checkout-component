/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelSalePos from '../model/CancelSalePos';
import PaymentPosRequest from '../model/PaymentPosRequest';
import PaymentPosRequestDTOV2 from '../model/PaymentPosRequestDTOV2';

/**
* PosPayments service.
* @module api/PosPaymentsApi
* @version 1.0
*/
export default class PosPaymentsApi {

    /**
    * Constructs a new PosPaymentsApi. 
    * @alias module:api/PosPaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the posControllerCancelPayment operation.
     * @callback module:api/PosPaymentsApi~posControllerCancelPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancelar uma venda via Pos
     * @param {String} seller_id 
     * @param {module:model/CancelSalePos} CancelSalePos 
     * @param {module:api/PosPaymentsApi~posControllerCancelPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    posControllerCancelPayment(seller_id, CancelSalePos, callback) {
      let postBody = CancelSalePos;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling posControllerCancelPayment");
      }
      // verify the required parameter 'CancelSalePos' is set
      if (CancelSalePos === undefined || CancelSalePos === null) {
        throw new Error("Missing the required parameter 'CancelSalePos' when calling posControllerCancelPayment");
      }

      let pathParams = {
        'seller_id': seller_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/pos/cancel_sale/{seller_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the posControllerPaymentsRequest operation.
     * @callback module:api/PosPaymentsApi~posControllerPaymentsRequestCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo pagamento via Pos
     * @param {String} seller_id 
     * @param {module:model/PaymentPosRequest} PaymentPosRequest 
     * @param {module:api/PosPaymentsApi~posControllerPaymentsRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    posControllerPaymentsRequest(seller_id, PaymentPosRequest, callback) {
      let postBody = PaymentPosRequest;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling posControllerPaymentsRequest");
      }
      // verify the required parameter 'PaymentPosRequest' is set
      if (PaymentPosRequest === undefined || PaymentPosRequest === null) {
        throw new Error("Missing the required parameter 'PaymentPosRequest' when calling posControllerPaymentsRequest");
      }

      let pathParams = {
        'seller_id': seller_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/pos/payments/{seller_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the posControllerV2PaymentsRequestWithSplit operation.
     * @callback module:api/PosPaymentsApi~posControllerV2PaymentsRequestWithSplitCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar novo pagamento via Pos
     * @param {String} seller_id 
     * @param {module:model/PaymentPosRequestDTOV2} PaymentPosRequestDTOV2 
     * @param {module:api/PosPaymentsApi~posControllerV2PaymentsRequestWithSplitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    posControllerV2PaymentsRequestWithSplit(seller_id, PaymentPosRequestDTOV2, callback) {
      let postBody = PaymentPosRequestDTOV2;
      // verify the required parameter 'seller_id' is set
      if (seller_id === undefined || seller_id === null) {
        throw new Error("Missing the required parameter 'seller_id' when calling posControllerV2PaymentsRequestWithSplit");
      }
      // verify the required parameter 'PaymentPosRequestDTOV2' is set
      if (PaymentPosRequestDTOV2 === undefined || PaymentPosRequestDTOV2 === null) {
        throw new Error("Missing the required parameter 'PaymentPosRequestDTOV2' when calling posControllerV2PaymentsRequestWithSplit");
      }

      let pathParams = {
        'seller_id': seller_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/pos/payments/{seller_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
