/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CreatePaymentLinkDto} from '../model/CreatePaymentLinkDto';
import {CreatePaymentLinkResponseDto} from '../model/CreatePaymentLinkResponseDto';
import {GetPaymentLinkDto} from '../model/GetPaymentLinkDto';
import {UpdatePaymentLinkDto} from '../model/UpdatePaymentLinkDto';

/**
* PaymentLinks service.
* @module api/PaymentLinksApi
* @version 1.0
*/
export class PaymentLinksApi {

    /**
    * Constructs a new PaymentLinksApi. 
    * @alias module:api/PaymentLinksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the cancelPaymentLink operation.
     * @callback moduleapi/PaymentLinksApi~cancelPaymentLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancelar um link de pagamento
     * @param {String} sellerId 
     * @param {String} paymentLinkId 
     * @param {module:api/PaymentLinksApi~cancelPaymentLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelPaymentLink(sellerId, paymentLinkId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling cancelPaymentLink");
      }
      // verify the required parameter 'paymentLinkId' is set
      if (paymentLinkId === undefined || paymentLinkId === null) {
        throw new Error("Missing the required parameter 'paymentLinkId' when calling cancelPaymentLink");
      }

      let pathParams = {
        'sellerId': sellerId,'paymentLinkId': paymentLinkId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/payment-links/sellers/{sellerId}/{paymentLinkId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createPaymentLink operation.
     * @callback moduleapi/PaymentLinksApi~createPaymentLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPaymentLinkDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gerar link de pagamento para o pagador de um estabelecimento
     * @param {module:model/CreatePaymentLinkDto} body 
     * @param {module:api/PaymentLinksApi~createPaymentLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPaymentLink(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPaymentLink");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPaymentLinkDto;

      return this.apiClient.callApi(
        '/v1/payment-links', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createPaymentLinkV2 operation.
     * @callback moduleapi/PaymentLinksApi~createPaymentLinkV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreatePaymentLinkResponseDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gerar um lote ou um link de pagamento para o pagador de um estabelecimento
     * @param {Array.<module:model/CreatePaymentLinkDto>} body 
     * @param {module:api/PaymentLinksApi~createPaymentLinkV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPaymentLinkV2(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPaymentLinkV2");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CreatePaymentLinkResponseDto];

      return this.apiClient.callApi(
        '/v2/payment-links', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPaymentLinkByToken operation.
     * @callback moduleapi/PaymentLinksApi~getPaymentLinkByTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPaymentLinkDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar os dados do link de pagamento informado
     * @param {String} token 
     * @param {module:api/PaymentLinksApi~getPaymentLinkByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPaymentLinkByToken(token, callback) {
      
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getPaymentLinkByToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPaymentLinkDto;

      return this.apiClient.callApi(
        '/v1/payment-links/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sentPaymentLinkReceiptMail operation.
     * @callback moduleapi/PaymentLinksApi~sentPaymentLinkReceiptMailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reenviar recibo para o email do pagador
     * @param {String} token 
     * @param {module:api/PaymentLinksApi~sentPaymentLinkReceiptMailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sentPaymentLinkReceiptMail(token, callback) {
      
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sentPaymentLinkReceiptMail");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/payment-links/{token}/receipt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePaymentLink operation.
     * @callback moduleapi/PaymentLinksApi~updatePaymentLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPaymentLinkDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar um link de pagamento
     * @param {module:model/UpdatePaymentLinkDto} body 
     * @param {String} paymentLinkId 
     * @param {module:api/PaymentLinksApi~updatePaymentLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePaymentLink(body, paymentLinkId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePaymentLink");
      }
      // verify the required parameter 'paymentLinkId' is set
      if (paymentLinkId === undefined || paymentLinkId === null) {
        throw new Error("Missing the required parameter 'paymentLinkId' when calling updatePaymentLink");
      }

      let pathParams = {
        'paymentLinkId': paymentLinkId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPaymentLinkDto;

      return this.apiClient.callApi(
        '/v1/payment-links/{paymentLinkId}/update', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}