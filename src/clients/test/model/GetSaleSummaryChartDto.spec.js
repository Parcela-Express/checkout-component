/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ParcelaExpressApi);
  }
}(this, function(expect, ParcelaExpressApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetSaleSummaryChartDto', function() {
      beforeEach(function() {
        instance = new ParcelaExpressApi.GetSaleSummaryChartDto();
      });

      it('should create an instance of GetSaleSummaryChartDto', function() {
        // TODO: update the code to test GetSaleSummaryChartDto
        expect(instance).to.be.a(ParcelaExpressApi.GetSaleSummaryChartDto);
      });

      it('should have the property salesProgression (base name: "sales_progression")', function() {
        // TODO: update the code to test the property salesProgression
        expect(instance).to.have.property('salesProgression');
        // expect(instance.salesProgression).to.be(expectedValueLiteral);
      });

      it('should have the property monthsProgression (base name: "months_progression")', function() {
        // TODO: update the code to test the property monthsProgression
        expect(instance).to.have.property('monthsProgression');
        // expect(instance.monthsProgression).to.be(expectedValueLiteral);
      });

      it('should have the property averageTicket (base name: "average_ticket")', function() {
        // TODO: update the code to test the property averageTicket
        expect(instance).to.have.property('averageTicket');
        // expect(instance.averageTicket).to.be(expectedValueLiteral);
      });

      it('should have the property totalSales (base name: "total_sales")', function() {
        // TODO: update the code to test the property totalSales
        expect(instance).to.have.property('totalSales');
        // expect(instance.totalSales).to.be(expectedValueLiteral);
      });

      it('should have the property totalPayers (base name: "total_payers")', function() {
        // TODO: update the code to test the property totalPayers
        expect(instance).to.have.property('totalPayers');
        // expect(instance.totalPayers).to.be(expectedValueLiteral);
      });

      it('should have the property financialSuccessSale (base name: "financial_success_sale")', function() {
        // TODO: update the code to test the property financialSuccessSale
        expect(instance).to.have.property('financialSuccessSale');
        // expect(instance.financialSuccessSale).to.be(expectedValueLiteral);
      });

      it('should have the property financialCanceledSale (base name: "financial_canceled_sale")', function() {
        // TODO: update the code to test the property financialCanceledSale
        expect(instance).to.have.property('financialCanceledSale');
        // expect(instance.financialCanceledSale).to.be(expectedValueLiteral);
      });

      it('should have the property financialPendingSale (base name: "financial_pending_sale")', function() {
        // TODO: update the code to test the property financialPendingSale
        expect(instance).to.have.property('financialPendingSale');
        // expect(instance.financialPendingSale).to.be(expectedValueLiteral);
      });

      it('should have the property salesDayProgression (base name: "sales_day_progression")', function() {
        // TODO: update the code to test the property salesDayProgression
        expect(instance).to.have.property('salesDayProgression');
        // expect(instance.salesDayProgression).to.be(expectedValueLiteral);
      });

      it('should have the property dayProgression (base name: "day_progression")', function() {
        // TODO: update the code to test the property dayProgression
        expect(instance).to.have.property('dayProgression');
        // expect(instance.dayProgression).to.be(expectedValueLiteral);
      });

      it('should have the property ticketDayProgression (base name: "ticket_day_progression")', function() {
        // TODO: update the code to test the property ticketDayProgression
        expect(instance).to.have.property('ticketDayProgression');
        // expect(instance.ticketDayProgression).to.be(expectedValueLiteral);
      });

      it('should have the property ticketMonthProgression (base name: "ticket_month_progression")', function() {
        // TODO: update the code to test the property ticketMonthProgression
        expect(instance).to.have.property('ticketMonthProgression');
        // expect(instance.ticketMonthProgression).to.be(expectedValueLiteral);
      });

      it('should have the property salesTotalDayProgression (base name: "sales_total_day_progression")', function() {
        // TODO: update the code to test the property salesTotalDayProgression
        expect(instance).to.have.property('salesTotalDayProgression');
        // expect(instance.salesTotalDayProgression).to.be(expectedValueLiteral);
      });

      it('should have the property salesTotalMonthProgression (base name: "sales_total_month_progression")', function() {
        // TODO: update the code to test the property salesTotalMonthProgression
        expect(instance).to.have.property('salesTotalMonthProgression');
        // expect(instance.salesTotalMonthProgression).to.be(expectedValueLiteral);
      });

    });
  });

}));
