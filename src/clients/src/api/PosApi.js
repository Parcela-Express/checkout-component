/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaginatedDto from '../model/PaginatedDto';
import UpdateSellerPosDto from '../model/UpdateSellerPosDto';

/**
* Pos service.
* @module api/PosApi
* @version 1.0
*/
export default class PosApi {

    /**
    * Constructs a new PosApi. 
    * @alias module:api/PosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listPos operation.
     * @callback module:api/PosApi~listPosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar as m√°quinas de todos os estabelecimentos
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {module:model/String} status 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to 'asc')
     * @param {module:api/PosApi~listPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listPos(limit, current_page, status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listPos");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listPos");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling listPos");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort'],
        'status': status
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/pos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBackofficePos operation.
     * @callback module:api/PosApi~updateBackofficePosCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar pos via backoffice
     * @param {String} posId 
     * @param {module:model/UpdateSellerPosDto} UpdateSellerPosDto 
     * @param {module:api/PosApi~updateBackofficePosCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBackofficePos(posId, UpdateSellerPosDto, callback) {
      let postBody = UpdateSellerPosDto;
      // verify the required parameter 'posId' is set
      if (posId === undefined || posId === null) {
        throw new Error("Missing the required parameter 'posId' when calling updateBackofficePos");
      }
      // verify the required parameter 'UpdateSellerPosDto' is set
      if (UpdateSellerPosDto === undefined || UpdateSellerPosDto === null) {
        throw new Error("Missing the required parameter 'UpdateSellerPosDto' when calling updateBackofficePos");
      }

      let pathParams = {
        'posId': posId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/pos/{posId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
