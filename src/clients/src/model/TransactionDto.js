/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {CreateMetadataDto} from './CreateMetadataDto';
import {CurrencyEnum} from './CurrencyEnum';
import {FeeTransactionDto} from './FeeTransactionDto';
import {OperationEnum} from './OperationEnum';
import {PaymentMethodTransactionDto} from './PaymentMethodTransactionDto';
import {SourceTransactionDto} from './SourceTransactionDto';
import {StatusEnum} from './StatusEnum';

/**
 * The TransactionDto model module.
 * @module model/TransactionDto
 * @version 1.0
 */
export class TransactionDto {
  /**
   * Constructs a new <code>TransactionDto</code>.
   * @alias module:model/TransactionDto
   * @class
   * @param id {String} 
   * @param sellerId {String} 
   * @param transactionNumber {String} Número de controle para agrupar transações da mesma venda. ex.: compra + estorno/cancelamento.
   * @param amountWithoutFees {Number} 
   * @param amountWithFees {Number} 
   * @param description {String} 
   * @param fees {Array.<module:model/FeeTransactionDto>} 
   * @param paymentMethod {module:model/PaymentMethodTransactionDto} 
   * @param operationType {module:model/OperationEnum} 
   * @param currency {module:model/CurrencyEnum} 
   * @param source {module:model/SourceTransactionDto} 
   * @param status {module:model/StatusEnum} 
   * @param metadata {module:model/CreateMetadataDto} 
   * @param createdAt {String} 
   * @param updatedAt {String} 
   * @param accountingAccountId {String} 
   * @param merchantHasPreCapture {Boolean} 
   * @param preCapture {Boolean} 
   * @param installments {Number} 
   * @param createdAtTimestamp {Number} 
   * @param orderNumber {Number} 
   * @param sellerCode {String} 
   * @param accountingAccountCategory {module:model/TransactionDto.AccountingAccountCategoryEnum} 
   * @param cardBrand {module:model/TransactionDto.CardBrandEnum} 
   * @param competenceDate {String} 
   * @param paymentTypeId {String} 
   * @param paymentTypeCode {String} 
   * @param eventCode {String} 
   * @param type {String} 
   */
  constructor(id, sellerId, transactionNumber, amountWithoutFees, amountWithFees, description, fees, paymentMethod, operationType, currency, source, status, metadata, createdAt, updatedAt, accountingAccountId, merchantHasPreCapture, preCapture, installments, createdAtTimestamp, orderNumber, sellerCode, accountingAccountCategory, cardBrand, competenceDate, paymentTypeId, paymentTypeCode, eventCode, type) {
    this.id = id;
    this.sellerId = sellerId;
    this.transactionNumber = transactionNumber;
    this.amountWithoutFees = amountWithoutFees;
    this.amountWithFees = amountWithFees;
    this.description = description;
    this.fees = fees;
    this.paymentMethod = paymentMethod;
    this.operationType = operationType;
    this.currency = currency;
    this.source = source;
    this.status = status;
    this.metadata = metadata;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.accountingAccountId = accountingAccountId;
    this.merchantHasPreCapture = merchantHasPreCapture;
    this.preCapture = preCapture;
    this.installments = installments;
    this.createdAtTimestamp = createdAtTimestamp;
    this.orderNumber = orderNumber;
    this.sellerCode = sellerCode;
    this.accountingAccountCategory = accountingAccountCategory;
    this.cardBrand = cardBrand;
    this.competenceDate = competenceDate;
    this.paymentTypeId = paymentTypeId;
    this.paymentTypeCode = paymentTypeCode;
    this.eventCode = eventCode;
    this.type = type;
  }

  /**
   * Constructs a <code>TransactionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TransactionDto} obj Optional instance to populate.
   * @return {module:model/TransactionDto} The populated <code>TransactionDto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new TransactionDto();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('seller_id'))
        obj.sellerId = ApiClient.convertToType(data['seller_id'], 'String');
      if (data.hasOwnProperty('transaction_number'))
        obj.transactionNumber = ApiClient.convertToType(data['transaction_number'], 'String');
      if (data.hasOwnProperty('amount_without_fees'))
        obj.amountWithoutFees = ApiClient.convertToType(data['amount_without_fees'], 'Number');
      if (data.hasOwnProperty('amount_with_fees'))
        obj.amountWithFees = ApiClient.convertToType(data['amount_with_fees'], 'Number');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('fees'))
        obj.fees = ApiClient.convertToType(data['fees'], [FeeTransactionDto]);
      if (data.hasOwnProperty('payment_method'))
        obj.paymentMethod = PaymentMethodTransactionDto.constructFromObject(data['payment_method']);
      if (data.hasOwnProperty('operation_type'))
        obj.operationType = OperationEnum.constructFromObject(data['operation_type']);
      if (data.hasOwnProperty('currency'))
        obj.currency = CurrencyEnum.constructFromObject(data['currency']);
      if (data.hasOwnProperty('source'))
        obj.source = SourceTransactionDto.constructFromObject(data['source']);
      if (data.hasOwnProperty('status'))
        obj.status = StatusEnum.constructFromObject(data['status']);
      if (data.hasOwnProperty('metadata'))
        obj.metadata = CreateMetadataDto.constructFromObject(data['metadata']);
      if (data.hasOwnProperty('created_at'))
        obj.createdAt = ApiClient.convertToType(data['created_at'], 'String');
      if (data.hasOwnProperty('updated_at'))
        obj.updatedAt = ApiClient.convertToType(data['updated_at'], 'String');
      if (data.hasOwnProperty('accounting_account_id'))
        obj.accountingAccountId = ApiClient.convertToType(data['accounting_account_id'], 'String');
      if (data.hasOwnProperty('merchant_has_pre_capture'))
        obj.merchantHasPreCapture = ApiClient.convertToType(data['merchant_has_pre_capture'], 'Boolean');
      if (data.hasOwnProperty('pre_capture'))
        obj.preCapture = ApiClient.convertToType(data['pre_capture'], 'Boolean');
      if (data.hasOwnProperty('installments'))
        obj.installments = ApiClient.convertToType(data['installments'], 'Number');
      if (data.hasOwnProperty('created_at_timestamp'))
        obj.createdAtTimestamp = ApiClient.convertToType(data['created_at_timestamp'], 'Number');
      if (data.hasOwnProperty('order_number'))
        obj.orderNumber = ApiClient.convertToType(data['order_number'], 'Number');
      if (data.hasOwnProperty('seller_code'))
        obj.sellerCode = ApiClient.convertToType(data['seller_code'], 'String');
      if (data.hasOwnProperty('accounting_account_category'))
        obj.accountingAccountCategory = ApiClient.convertToType(data['accounting_account_category'], 'String');
      if (data.hasOwnProperty('card_brand'))
        obj.cardBrand = ApiClient.convertToType(data['card_brand'], 'String');
      if (data.hasOwnProperty('competence_date'))
        obj.competenceDate = ApiClient.convertToType(data['competence_date'], 'String');
      if (data.hasOwnProperty('payment_type_id'))
        obj.paymentTypeId = ApiClient.convertToType(data['payment_type_id'], 'String');
      if (data.hasOwnProperty('payment_type_code'))
        obj.paymentTypeCode = ApiClient.convertToType(data['payment_type_code'], 'String');
      if (data.hasOwnProperty('event_code'))
        obj.eventCode = ApiClient.convertToType(data['event_code'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('form_payment'))
        obj.formPayment = ApiClient.convertToType(data['form_payment'], 'String');
      if (data.hasOwnProperty('is_standalone'))
        obj.isStandalone = ApiClient.convertToType(data['is_standalone'], 'Boolean');
    }
    return obj;
  }
}

/**
 * @member {String} id
 */
TransactionDto.prototype.id = undefined;

/**
 * @member {String} sellerId
 */
TransactionDto.prototype.sellerId = undefined;

/**
 * Número de controle para agrupar transações da mesma venda. ex.: compra + estorno/cancelamento.
 * @member {String} transactionNumber
 */
TransactionDto.prototype.transactionNumber = undefined;

/**
 * @member {Number} amountWithoutFees
 */
TransactionDto.prototype.amountWithoutFees = undefined;

/**
 * @member {Number} amountWithFees
 */
TransactionDto.prototype.amountWithFees = undefined;

/**
 * @member {String} description
 */
TransactionDto.prototype.description = undefined;

/**
 * @member {Array.<module:model/FeeTransactionDto>} fees
 */
TransactionDto.prototype.fees = undefined;

/**
 * @member {module:model/PaymentMethodTransactionDto} paymentMethod
 */
TransactionDto.prototype.paymentMethod = undefined;

/**
 * @member {module:model/OperationEnum} operationType
 */
TransactionDto.prototype.operationType = undefined;

/**
 * @member {module:model/CurrencyEnum} currency
 */
TransactionDto.prototype.currency = undefined;

/**
 * @member {module:model/SourceTransactionDto} source
 */
TransactionDto.prototype.source = undefined;

/**
 * @member {module:model/StatusEnum} status
 */
TransactionDto.prototype.status = undefined;

/**
 * @member {module:model/CreateMetadataDto} metadata
 */
TransactionDto.prototype.metadata = undefined;

/**
 * @member {String} createdAt
 */
TransactionDto.prototype.createdAt = undefined;

/**
 * @member {String} updatedAt
 */
TransactionDto.prototype.updatedAt = undefined;

/**
 * @member {String} accountingAccountId
 */
TransactionDto.prototype.accountingAccountId = undefined;

/**
 * @member {Boolean} merchantHasPreCapture
 */
TransactionDto.prototype.merchantHasPreCapture = undefined;

/**
 * @member {Boolean} preCapture
 */
TransactionDto.prototype.preCapture = undefined;

/**
 * @member {Number} installments
 */
TransactionDto.prototype.installments = undefined;

/**
 * @member {Number} createdAtTimestamp
 */
TransactionDto.prototype.createdAtTimestamp = undefined;

/**
 * @member {Number} orderNumber
 */
TransactionDto.prototype.orderNumber = undefined;

/**
 * @member {String} sellerCode
 */
TransactionDto.prototype.sellerCode = undefined;

/**
 * Allowed values for the <code>accountingAccountCategory</code> property.
 * @enum {String}
 * @readonly
 */
TransactionDto.AccountingAccountCategoryEnum = {
  /**
   * value: "adyen"
   * @const
   */
  adyen: "adyen",

  /**
   * value: "adyen:assets"
   * @const
   */
  adyenassets: "adyen:assets",

  /**
   * value: "adyen:liabilities"
   * @const
   */
  adyenliabilities: "adyen:liabilities",

  /**
   * value: "zoop:assets"
   * @const
   */
  zoopassets: "zoop:assets",

  /**
   * value: "zoop:liabilities"
   * @const
   */
  zoopliabilities: "zoop:liabilities",

  /**
   * value: "parcelaexpress"
   * @const
   */
  parcelaexpress: "parcelaexpress",

  /**
   * value: "parcelaexpress:assets"
   * @const
   */
  parcelaexpressassets: "parcelaexpress:assets",

  /**
   * value: "parcelaexpress:liabilities"
   * @const
   */
  parcelaexpressliabilities: "parcelaexpress:liabilities",

  /**
   * value: "parcelaexpress:spread:assets"
   * @const
   */
  parcelaexpressspreadassets: "parcelaexpress:spread:assets",

  /**
   * value: "parcelaexpress:spread:liabilities"
   * @const
   */
  parcelaexpressspreadliabilities: "parcelaexpress:spread:liabilities",

  /**
   * value: "seller:settlement:assets"
   * @const
   */
  sellersettlementassets: "seller:settlement:assets",

  /**
   * value: "seller:settlement:liabilities"
   * @const
   */
  sellersettlementliabilities: "seller:settlement:liabilities",

  /**
   * value: "seller:assets"
   * @const
   */
  sellerassets: "seller:assets",

  /**
   * value: "seller:liabilities"
   * @const
   */
  sellerliabilities: "seller:liabilities"
};
/**
 * @member {module:model/TransactionDto.AccountingAccountCategoryEnum} accountingAccountCategory
 */
TransactionDto.prototype.accountingAccountCategory = undefined;

/**
 * Allowed values for the <code>cardBrand</code> property.
 * @enum {String}
 * @readonly
 */
TransactionDto.CardBrandEnum = {
  /**
   * value: "visa"
   * @const
   */
  visa: "visa",

  /**
   * value: "elo"
   * @const
   */
  elo: "elo",

  /**
   * value: "mc"
   * @const
   */
  mc: "mc",

  /**
   * value: "amex"
   * @const
   */
  amex: "amex",

  /**
   * value: "hipercard"
   * @const
   */
  hipercard: "hipercard"
};
/**
 * @member {module:model/TransactionDto.CardBrandEnum} cardBrand
 */
TransactionDto.prototype.cardBrand = undefined;

/**
 * @member {String} competenceDate
 */
TransactionDto.prototype.competenceDate = undefined;

/**
 * @member {String} paymentTypeId
 */
TransactionDto.prototype.paymentTypeId = undefined;

/**
 * @member {String} paymentTypeCode
 */
TransactionDto.prototype.paymentTypeCode = undefined;

/**
 * @member {String} eventCode
 */
TransactionDto.prototype.eventCode = undefined;

/**
 * @member {String} type
 */
TransactionDto.prototype.type = undefined;

/**
 * @member {String} formPayment
 */
TransactionDto.prototype.formPayment = undefined;

/**
 * @member {Boolean} isStandalone
 */
TransactionDto.prototype.isStandalone = undefined;

