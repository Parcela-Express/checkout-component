/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ForgotPasswordRequestDto} from '../model/ForgotPasswordRequestDto';
import {GetForgotPasswordRequestDto} from '../model/GetForgotPasswordRequestDto';
import {ResetPasswordRequestDto} from '../model/ResetPasswordRequestDto';
import {UserLoginDto} from '../model/UserLoginDto';
import {UserLoginResponseDto} from '../model/UserLoginResponseDto';
import {UserRefreshTokenDto} from '../model/UserRefreshTokenDto';
import {UserRefreshTokenResponseDto} from '../model/UserRefreshTokenResponseDto';

/**
* Auth service.
* @module api/AuthApi
* @version 1.0
*/
export class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the forgotPasswordRequest operation.
     * @callback moduleapi/AuthApi~forgotPasswordRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Solicitar alteração de senha
     * @param {module:model/ForgotPasswordRequestDto} body 
     * @param {module:api/AuthApi~forgotPasswordRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    forgotPasswordRequest(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling forgotPasswordRequest");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/auth/forgot-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getForgotPasswordRequestData operation.
     * @callback moduleapi/AuthApi~getForgotPasswordRequestDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetForgotPasswordRequestDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validar token enviado no esqueci minha senha
     * @param {String} token 
     * @param {module:api/AuthApi~getForgotPasswordRequestDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getForgotPasswordRequestData(token, callback) {
      
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getForgotPasswordRequestData");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetForgotPasswordRequestDto;

      return this.apiClient.callApi(
        '/v1/auth/forgot-password/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the login operation.
     * @callback moduleapi/AuthApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserLoginResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Realizar autenticação na aplicação
     * @param {module:model/UserLoginDto} body 
     * @param {module:api/AuthApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    login(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling login");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserLoginResponseDto;

      return this.apiClient.callApi(
        '/v1/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the loginV2 operation.
     * @callback moduleapi/AuthApi~loginV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserLoginResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Realizar autenticação na aplicação
     * @param {module:model/UserLoginDto} body 
     * @param {module:api/AuthApi~loginV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    loginV2(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling loginV2");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserLoginResponseDto;

      return this.apiClient.callApi(
        '/v2/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the refreshToken operation.
     * @callback moduleapi/AuthApi~refreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRefreshTokenResponseDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar o token da aplicação
     * @param {module:model/UserRefreshTokenDto} body 
     * @param {module:api/AuthApi~refreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    refreshToken(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling refreshToken");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserRefreshTokenResponseDto;

      return this.apiClient.callApi(
        '/v1/auth/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the resetPasswordRequest operation.
     * @callback moduleapi/AuthApi~resetPasswordRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Realizar alteração de senha
     * @param {module:model/ResetPasswordRequestDto} body 
     * @param {module:api/AuthApi~resetPasswordRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetPasswordRequest(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resetPasswordRequest");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/auth/reset-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}