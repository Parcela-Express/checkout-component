/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateMetadataDto from './CreateMetadataDto';
import CurrencyEnum from './CurrencyEnum';
import FeeTransactionDto from './FeeTransactionDto';
import OperationEnum from './OperationEnum';
import PaymentMethodTransactionDto from './PaymentMethodTransactionDto';
import SourceTransactionDto from './SourceTransactionDto';
import StatusEnum from './StatusEnum';

/**
 * The TransactionDto model module.
 * @module model/TransactionDto
 * @version 1.0
 */
class TransactionDto {
    /**
     * Constructs a new <code>TransactionDto</code>.
     * @alias module:model/TransactionDto
     * @param id {String} 
     * @param seller_id {String} 
     * @param transaction_number {String} Número de controle para agrupar transações da mesma venda. ex.: compra + estorno/cancelamento.
     * @param amount_without_fees {Number} 
     * @param amount_with_fees {Number} 
     * @param description {String} 
     * @param fees {Array.<module:model/FeeTransactionDto>} 
     * @param payment_method {module:model/PaymentMethodTransactionDto} 
     * @param operation_type {module:model/OperationEnum} 
     * @param currency {module:model/CurrencyEnum} 
     * @param source {module:model/SourceTransactionDto} 
     * @param status {module:model/StatusEnum} 
     * @param metadata {module:model/CreateMetadataDto} 
     * @param created_at {String} 
     * @param updated_at {String} 
     * @param accounting_account_id {String} 
     * @param merchant_has_pre_capture {Boolean} 
     * @param pre_capture {Boolean} 
     * @param installments {Number} 
     * @param created_at_timestamp {Number} 
     * @param order_number {Number} 
     * @param seller_code {String} 
     * @param card_brand {module:model/TransactionDto.CardBrandEnum} 
     * @param competence_date {String} 
     * @param payment_type_id {String} 
     * @param payment_type_code {String} 
     * @param event_code {String} 
     * @param type {String} 
     */
    constructor(id, seller_id, transaction_number, amount_without_fees, amount_with_fees, description, fees, payment_method, operation_type, currency, source, status, metadata, created_at, updated_at, accounting_account_id, merchant_has_pre_capture, pre_capture, installments, created_at_timestamp, order_number, seller_code, card_brand, competence_date, payment_type_id, payment_type_code, event_code, type) { 
        
        TransactionDto.initialize(this, id, seller_id, transaction_number, amount_without_fees, amount_with_fees, description, fees, payment_method, operation_type, currency, source, status, metadata, created_at, updated_at, accounting_account_id, merchant_has_pre_capture, pre_capture, installments, created_at_timestamp, order_number, seller_code, card_brand, competence_date, payment_type_id, payment_type_code, event_code, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, seller_id, transaction_number, amount_without_fees, amount_with_fees, description, fees, payment_method, operation_type, currency, source, status, metadata, created_at, updated_at, accounting_account_id, merchant_has_pre_capture, pre_capture, installments, created_at_timestamp, order_number, seller_code, card_brand, competence_date, payment_type_id, payment_type_code, event_code, type) { 
        obj['id'] = id;
        obj['seller_id'] = seller_id;
        obj['transaction_number'] = transaction_number;
        obj['amount_without_fees'] = amount_without_fees;
        obj['amount_with_fees'] = amount_with_fees;
        obj['description'] = description;
        obj['fees'] = fees;
        obj['payment_method'] = payment_method;
        obj['operation_type'] = operation_type;
        obj['currency'] = currency;
        obj['source'] = source;
        obj['status'] = status;
        obj['metadata'] = metadata;
        obj['created_at'] = created_at;
        obj['updated_at'] = updated_at;
        obj['accounting_account_id'] = accounting_account_id;
        obj['merchant_has_pre_capture'] = merchant_has_pre_capture;
        obj['pre_capture'] = pre_capture;
        obj['installments'] = installments;
        obj['created_at_timestamp'] = created_at_timestamp;
        obj['order_number'] = order_number;
        obj['seller_code'] = seller_code;
        obj['card_brand'] = card_brand;
        obj['competence_date'] = competence_date;
        obj['payment_type_id'] = payment_type_id;
        obj['payment_type_code'] = payment_type_code;
        obj['event_code'] = event_code;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>TransactionDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionDto} obj Optional instance to populate.
     * @return {module:model/TransactionDto} The populated <code>TransactionDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionDto();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('seller_id')) {
                obj['seller_id'] = ApiClient.convertToType(data['seller_id'], 'String');
            }
            if (data.hasOwnProperty('transaction_number')) {
                obj['transaction_number'] = ApiClient.convertToType(data['transaction_number'], 'String');
            }
            if (data.hasOwnProperty('amount_without_fees')) {
                obj['amount_without_fees'] = ApiClient.convertToType(data['amount_without_fees'], 'Number');
            }
            if (data.hasOwnProperty('amount_with_fees')) {
                obj['amount_with_fees'] = ApiClient.convertToType(data['amount_with_fees'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fees')) {
                obj['fees'] = ApiClient.convertToType(data['fees'], [FeeTransactionDto]);
            }
            if (data.hasOwnProperty('payment_method')) {
                obj['payment_method'] = PaymentMethodTransactionDto.constructFromObject(data['payment_method']);
            }
            if (data.hasOwnProperty('operation_type')) {
                obj['operation_type'] = OperationEnum.constructFromObject(data['operation_type']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = CurrencyEnum.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = SourceTransactionDto.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = StatusEnum.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = CreateMetadataDto.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('accounting_account_id')) {
                obj['accounting_account_id'] = ApiClient.convertToType(data['accounting_account_id'], 'String');
            }
            if (data.hasOwnProperty('merchant_has_pre_capture')) {
                obj['merchant_has_pre_capture'] = ApiClient.convertToType(data['merchant_has_pre_capture'], 'Boolean');
            }
            if (data.hasOwnProperty('pre_capture')) {
                obj['pre_capture'] = ApiClient.convertToType(data['pre_capture'], 'Boolean');
            }
            if (data.hasOwnProperty('installments')) {
                obj['installments'] = ApiClient.convertToType(data['installments'], 'Number');
            }
            if (data.hasOwnProperty('created_at_timestamp')) {
                obj['created_at_timestamp'] = ApiClient.convertToType(data['created_at_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('order_number')) {
                obj['order_number'] = ApiClient.convertToType(data['order_number'], 'Number');
            }
            if (data.hasOwnProperty('seller_code')) {
                obj['seller_code'] = ApiClient.convertToType(data['seller_code'], 'String');
            }
            if (data.hasOwnProperty('card_brand')) {
                obj['card_brand'] = ApiClient.convertToType(data['card_brand'], 'String');
            }
            if (data.hasOwnProperty('competence_date')) {
                obj['competence_date'] = ApiClient.convertToType(data['competence_date'], 'String');
            }
            if (data.hasOwnProperty('payment_type_id')) {
                obj['payment_type_id'] = ApiClient.convertToType(data['payment_type_id'], 'String');
            }
            if (data.hasOwnProperty('payment_type_code')) {
                obj['payment_type_code'] = ApiClient.convertToType(data['payment_type_code'], 'String');
            }
            if (data.hasOwnProperty('event_code')) {
                obj['event_code'] = ApiClient.convertToType(data['event_code'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('form_payment')) {
                obj['form_payment'] = ApiClient.convertToType(data['form_payment'], 'String');
            }
            if (data.hasOwnProperty('is_standalone')) {
                obj['is_standalone'] = ApiClient.convertToType(data['is_standalone'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
TransactionDto.prototype['id'] = undefined;

/**
 * @member {String} seller_id
 */
TransactionDto.prototype['seller_id'] = undefined;

/**
 * Número de controle para agrupar transações da mesma venda. ex.: compra + estorno/cancelamento.
 * @member {String} transaction_number
 */
TransactionDto.prototype['transaction_number'] = undefined;

/**
 * @member {Number} amount_without_fees
 */
TransactionDto.prototype['amount_without_fees'] = undefined;

/**
 * @member {Number} amount_with_fees
 */
TransactionDto.prototype['amount_with_fees'] = undefined;

/**
 * @member {String} description
 */
TransactionDto.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/FeeTransactionDto>} fees
 */
TransactionDto.prototype['fees'] = undefined;

/**
 * @member {module:model/PaymentMethodTransactionDto} payment_method
 */
TransactionDto.prototype['payment_method'] = undefined;

/**
 * @member {module:model/OperationEnum} operation_type
 */
TransactionDto.prototype['operation_type'] = undefined;

/**
 * @member {module:model/CurrencyEnum} currency
 */
TransactionDto.prototype['currency'] = undefined;

/**
 * @member {module:model/SourceTransactionDto} source
 */
TransactionDto.prototype['source'] = undefined;

/**
 * @member {module:model/StatusEnum} status
 */
TransactionDto.prototype['status'] = undefined;

/**
 * @member {module:model/CreateMetadataDto} metadata
 */
TransactionDto.prototype['metadata'] = undefined;

/**
 * @member {String} created_at
 */
TransactionDto.prototype['created_at'] = undefined;

/**
 * @member {String} updated_at
 */
TransactionDto.prototype['updated_at'] = undefined;

/**
 * @member {String} accounting_account_id
 */
TransactionDto.prototype['accounting_account_id'] = undefined;

/**
 * @member {Boolean} merchant_has_pre_capture
 */
TransactionDto.prototype['merchant_has_pre_capture'] = undefined;

/**
 * @member {Boolean} pre_capture
 */
TransactionDto.prototype['pre_capture'] = undefined;

/**
 * @member {Number} installments
 */
TransactionDto.prototype['installments'] = undefined;

/**
 * @member {Number} created_at_timestamp
 */
TransactionDto.prototype['created_at_timestamp'] = undefined;

/**
 * @member {Number} order_number
 */
TransactionDto.prototype['order_number'] = undefined;

/**
 * @member {String} seller_code
 */
TransactionDto.prototype['seller_code'] = undefined;

/**
 * @member {module:model/TransactionDto.CardBrandEnum} card_brand
 */
TransactionDto.prototype['card_brand'] = undefined;

/**
 * @member {String} competence_date
 */
TransactionDto.prototype['competence_date'] = undefined;

/**
 * @member {String} payment_type_id
 */
TransactionDto.prototype['payment_type_id'] = undefined;

/**
 * @member {String} payment_type_code
 */
TransactionDto.prototype['payment_type_code'] = undefined;

/**
 * @member {String} event_code
 */
TransactionDto.prototype['event_code'] = undefined;

/**
 * @member {String} type
 */
TransactionDto.prototype['type'] = undefined;

/**
 * @member {String} form_payment
 */
TransactionDto.prototype['form_payment'] = undefined;

/**
 * @member {Boolean} is_standalone
 */
TransactionDto.prototype['is_standalone'] = undefined;





/**
 * Allowed values for the <code>card_brand</code> property.
 * @enum {String}
 * @readonly
 */
TransactionDto['CardBrandEnum'] = {

    /**
     * value: "visa"
     * @const
     */
    "visa": "visa",

    /**
     * value: "elo"
     * @const
     */
    "elo": "elo",

    /**
     * value: "mc"
     * @const
     */
    "mc": "mc",

    /**
     * value: "amex"
     * @const
     */
    "amex": "amex",

    /**
     * value: "hipercard"
     * @const
     */
    "hipercard": "hipercard"
};



export default TransactionDto;

