/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUserDto from '../model/CreateUserDto';
import GetUserDto from '../model/GetUserDto';
import PaginatedDto from '../model/PaginatedDto';
import UpdateUserDto from '../model/UpdateUserDto';

/**
* Users service.
* @module api/UsersApi
* @version 1.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBackofficeUser operation.
     * @callback module:api/UsersApi~createBackofficeUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar usuário de backoffice
     * @param {module:model/CreateUserDto} CreateUserDto 
     * @param {module:api/UsersApi~createBackofficeUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserDto}
     */
    createBackofficeUser(CreateUserDto, callback) {
      let postBody = CreateUserDto;
      // verify the required parameter 'CreateUserDto' is set
      if (CreateUserDto === undefined || CreateUserDto === null) {
        throw new Error("Missing the required parameter 'CreateUserDto' when calling createBackofficeUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetUserDto;
      return this.apiClient.callApi(
        '/v1/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/UsersApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os usuários de todos os estabelecimentos
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {module:model/String} type 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to 'time-descending')
     * @param {module:api/UsersApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listUsers(limit, current_page, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listUsers");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listUsers");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling listUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort'],
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBackofficeUser operation.
     * @callback module:api/UsersApi~updateBackofficeUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar um usuário de backoffice
     * @param {String} userId 
     * @param {module:model/UpdateUserDto} UpdateUserDto 
     * @param {module:api/UsersApi~updateBackofficeUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBackofficeUser(userId, UpdateUserDto, callback) {
      let postBody = UpdateUserDto;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateBackofficeUser");
      }
      // verify the required parameter 'UpdateUserDto' is set
      if (UpdateUserDto === undefined || UpdateUserDto === null) {
        throw new Error("Missing the required parameter 'UpdateUserDto' when calling updateBackofficeUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
