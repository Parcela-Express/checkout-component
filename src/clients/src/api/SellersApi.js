/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfirmPaymentBadRequestDto from '../model/ConfirmPaymentBadRequestDto';
import ConfirmPaymentDto from '../model/ConfirmPaymentDto';
import CreateExportSellersListDto from '../model/CreateExportSellersListDto';
import CreatePayerDto from '../model/CreatePayerDto';
import CreateSaleAutoGeneratePaymentLinkDto from '../model/CreateSaleAutoGeneratePaymentLinkDto';
import CreateSaleDto from '../model/CreateSaleDto';
import CreateSellerCredentialDto from '../model/CreateSellerCredentialDto';
import CreateSellerCredentialResponseDto from '../model/CreateSellerCredentialResponseDto';
import CreateSellerDto from '../model/CreateSellerDto';
import CreateSellerPosDto from '../model/CreateSellerPosDto';
import CreateSellerUserDto from '../model/CreateSellerUserDto';
import CreateSplitRulesDto from '../model/CreateSplitRulesDto';
import EditSellerCredentialDto from '../model/EditSellerCredentialDto';
import EditSellerDto from '../model/EditSellerDto';
import EditSellerPartialDto from '../model/EditSellerPartialDto';
import GetAcquirerDto from '../model/GetAcquirerDto';
import GetBilletDto from '../model/GetBilletDto';
import GetFileExportRequestDto from '../model/GetFileExportRequestDto';
import GetLogoDto from '../model/GetLogoDto';
import GetMerchantSellerDto from '../model/GetMerchantSellerDto';
import GetPayerDto from '../model/GetPayerDto';
import GetSaleDto from '../model/GetSaleDto';
import GetSaleSummaryChartDto from '../model/GetSaleSummaryChartDto';
import GetSaleSummaryDto from '../model/GetSaleSummaryDto';
import GetSaleWithAcquirerDocumentDto from '../model/GetSaleWithAcquirerDocumentDto';
import GetSellerAcceptedPaymentMethodsDto from '../model/GetSellerAcceptedPaymentMethodsDto';
import GetSellerCredentialResponseDto from '../model/GetSellerCredentialResponseDto';
import GetSellerDto from '../model/GetSellerDto';
import GetSellerPosDto from '../model/GetSellerPosDto';
import GetSellerReportCustomizationDto from '../model/GetSellerReportCustomizationDto';
import GetSellerSaleAutoGeneratePaymentLinkDto from '../model/GetSellerSaleAutoGeneratePaymentLinkDto';
import GetSellerSaleDto from '../model/GetSellerSaleDto';
import GetSellerUserDto from '../model/GetSellerUserDto';
import IncludeAcquirerDto from '../model/IncludeAcquirerDto';
import IncludeSalePlanDto from '../model/IncludeSalePlanDto';
import NotaryOffice from '../model/NotaryOffice';
import PaginatedDto from '../model/PaginatedDto';
import SearchSellerDto from '../model/SearchSellerDto';
import SplitRulesDto from '../model/SplitRulesDto';
import UpdateSellerThemeDto from '../model/UpdateSellerThemeDto';
import UpdateSellerUserDto from '../model/UpdateSellerUserDto';

/**
* Sellers service.
* @module api/SellersApi
* @version 1.0
*/
export default class SellersApi {

    /**
    * Constructs a new SellersApi. 
    * @alias module:api/SellersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAcquirer operation.
     * @callback module:api/SellersApi~addAcquirerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associar uma adquirente a um estabelecimento
     * @param {String} sellerId 
     * @param {module:model/IncludeAcquirerDto} IncludeAcquirerDto 
     * @param {module:api/SellersApi~addAcquirerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerDto}
     */
    addAcquirer(sellerId, IncludeAcquirerDto, callback) {
      let postBody = IncludeAcquirerDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling addAcquirer");
      }
      // verify the required parameter 'IncludeAcquirerDto' is set
      if (IncludeAcquirerDto === undefined || IncludeAcquirerDto === null) {
        throw new Error("Missing the required parameter 'IncludeAcquirerDto' when calling addAcquirer");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/acquirers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addSalePlan operation.
     * @callback module:api/SellersApi~addSalePlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associar um plano de vendas a um estabelecimento
     * @param {String} sellerId 
     * @param {module:model/IncludeSalePlanDto} IncludeSalePlanDto 
     * @param {module:api/SellersApi~addSalePlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerDto}
     */
    addSalePlan(sellerId, IncludeSalePlanDto, callback) {
      let postBody = IncludeSalePlanDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling addSalePlan");
      }
      // verify the required parameter 'IncludeSalePlanDto' is set
      if (IncludeSalePlanDto === undefined || IncludeSalePlanDto === null) {
        throw new Error("Missing the required parameter 'IncludeSalePlanDto' when calling addSalePlan");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales-plans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmSales operation.
     * @callback module:api/SellersApi~confirmSalesCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Autorizar liquidação das vendas que estão aguardando confirmação
     * Em alternativa a esta rota, utilize a [v2](#/Sellers/newConfirmSales)
     * @param {String} sellerId 
     * @param {module:model/ConfirmPaymentDto} ConfirmPaymentDto 
     * @param {module:api/SellersApi~confirmSalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    confirmSales(sellerId, ConfirmPaymentDto, callback) {
      let postBody = ConfirmPaymentDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling confirmSales");
      }
      // verify the required parameter 'ConfirmPaymentDto' is set
      if (ConfirmPaymentDto === undefined || ConfirmPaymentDto === null) {
        throw new Error("Missing the required parameter 'ConfirmPaymentDto' when calling confirmSales");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSaleAutoGenerateLinkPayment operation.
     * @callback module:api/SellersApi~createSaleAutoGenerateLinkPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerSaleAutoGeneratePaymentLinkDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gerar uma venda com status pendente para um estabelecimento pelo link auto gerável
     * @param {String} sellerId 
     * @param {module:model/CreateSaleAutoGeneratePaymentLinkDto} CreateSaleAutoGeneratePaymentLinkDto 
     * @param {module:api/SellersApi~createSaleAutoGenerateLinkPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerSaleAutoGeneratePaymentLinkDto}
     */
    createSaleAutoGenerateLinkPayment(sellerId, CreateSaleAutoGeneratePaymentLinkDto, callback) {
      let postBody = CreateSaleAutoGeneratePaymentLinkDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createSaleAutoGenerateLinkPayment");
      }
      // verify the required parameter 'CreateSaleAutoGeneratePaymentLinkDto' is set
      if (CreateSaleAutoGeneratePaymentLinkDto === undefined || CreateSaleAutoGeneratePaymentLinkDto === null) {
        throw new Error("Missing the required parameter 'CreateSaleAutoGeneratePaymentLinkDto' when calling createSaleAutoGenerateLinkPayment");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerSaleAutoGeneratePaymentLinkDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales/payment-link-auto', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSeller operation.
     * @callback module:api/SellersApi~createSellerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar estabelecimento
     * @param {module:model/CreateSellerDto} CreateSellerDto 
     * @param {module:api/SellersApi~createSellerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerDto}
     */
    createSeller(CreateSellerDto, callback) {
      let postBody = CreateSellerDto;
      // verify the required parameter 'CreateSellerDto' is set
      if (CreateSellerDto === undefined || CreateSellerDto === null) {
        throw new Error("Missing the required parameter 'CreateSellerDto' when calling createSeller");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerDto;
      return this.apiClient.callApi(
        '/v1/sellers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSellerCredential operation.
     * @callback module:api/SellersApi~createSellerCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSellerCredentialResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar uma nova credencial para o estabelecimento
     * @param {String} sellerId 
     * @param {module:model/CreateSellerCredentialDto} CreateSellerCredentialDto 
     * @param {module:api/SellersApi~createSellerCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSellerCredentialResponseDto}
     */
    createSellerCredential(sellerId, CreateSellerCredentialDto, callback) {
      let postBody = CreateSellerCredentialDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createSellerCredential");
      }
      // verify the required parameter 'CreateSellerCredentialDto' is set
      if (CreateSellerCredentialDto === undefined || CreateSellerCredentialDto === null) {
        throw new Error("Missing the required parameter 'CreateSellerCredentialDto' when calling createSellerCredential");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSellerCredentialResponseDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/credentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSellerPayer operation.
     * @callback module:api/SellersApi~createSellerPayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePayerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar pagador do estabelecimento
     * @param {String} sellerId 
     * @param {module:model/CreatePayerDto} CreatePayerDto 
     * @param {module:api/SellersApi~createSellerPayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePayerDto}
     */
    createSellerPayer(sellerId, CreatePayerDto, callback) {
      let postBody = CreatePayerDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createSellerPayer");
      }
      // verify the required parameter 'CreatePayerDto' is set
      if (CreatePayerDto === undefined || CreatePayerDto === null) {
        throw new Error("Missing the required parameter 'CreatePayerDto' when calling createSellerPayer");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePayerDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/payers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSellerPos operation.
     * @callback module:api/SellersApi~createSellerPosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerPosDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Incluir um POS em um estabelecimento
     * @param {String} sellerId 
     * @param {module:model/CreateSellerPosDto} CreateSellerPosDto 
     * @param {module:api/SellersApi~createSellerPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerPosDto}
     */
    createSellerPos(sellerId, CreateSellerPosDto, callback) {
      let postBody = CreateSellerPosDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createSellerPos");
      }
      // verify the required parameter 'CreateSellerPosDto' is set
      if (CreateSellerPosDto === undefined || CreateSellerPosDto === null) {
        throw new Error("Missing the required parameter 'CreateSellerPosDto' when calling createSellerPos");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerPosDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/pos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSellerSale operation.
     * @callback module:api/SellersApi~createSellerSaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerSaleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Realizar venda para um estabelecimento
     * @param {String} sellerId 
     * @param {module:model/CreateSaleDto} CreateSaleDto 
     * @param {module:api/SellersApi~createSellerSaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerSaleDto}
     */
    createSellerSale(sellerId, CreateSaleDto, callback) {
      let postBody = CreateSaleDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createSellerSale");
      }
      // verify the required parameter 'CreateSaleDto' is set
      if (CreateSaleDto === undefined || CreateSaleDto === null) {
        throw new Error("Missing the required parameter 'CreateSaleDto' when calling createSellerSale");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerSaleDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSellerUser operation.
     * @callback module:api/SellersApi~createSellerUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerUserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar usuário do estabelecimento
     * @param {String} sellerId 
     * @param {module:model/CreateSellerUserDto} CreateSellerUserDto 
     * @param {module:api/SellersApi~createSellerUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerUserDto}
     */
    createSellerUser(sellerId, CreateSellerUserDto, callback) {
      let postBody = CreateSellerUserDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createSellerUser");
      }
      // verify the required parameter 'CreateSellerUserDto' is set
      if (CreateSellerUserDto === undefined || CreateSellerUserDto === null) {
        throw new Error("Missing the required parameter 'CreateSellerUserDto' when calling createSellerUser");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerUserDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSellersListExportRequest operation.
     * @callback module:api/SellersApi~createSellersListExportRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFileExportRequestDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gerar uma requisição de exportação da lista de estabelecimentos
     * @param {module:model/CreateExportSellersListDto} CreateExportSellersListDto 
     * @param {module:api/SellersApi~createSellersListExportRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFileExportRequestDto}
     */
    createSellersListExportRequest(CreateExportSellersListDto, callback) {
      let postBody = CreateExportSellersListDto;
      // verify the required parameter 'CreateExportSellersListDto' is set
      if (CreateExportSellersListDto === undefined || CreateExportSellersListDto === null) {
        throw new Error("Missing the required parameter 'CreateExportSellersListDto' when calling createSellersListExportRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFileExportRequestDto;
      return this.apiClient.callApi(
        '/v1/sellers/list/export/requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSellerCredential operation.
     * @callback module:api/SellersApi~deleteSellerCredentialCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletar uma credencial de estabelecimento
     * @param {String} sellerId 
     * @param {String} credentialId 
     * @param {module:api/SellersApi~deleteSellerCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSellerCredential(sellerId, credentialId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling deleteSellerCredential");
      }
      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling deleteSellerCredential");
      }

      let pathParams = {
        'sellerId': sellerId,
        'credentialId': credentialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/credentials/{credentialId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editSeller operation.
     * @callback module:api/SellersApi~editSellerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Editar estabelecimento
     * @param {String} sellerId 
     * @param {module:model/EditSellerDto} EditSellerDto 
     * @param {module:api/SellersApi~editSellerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editSeller(sellerId, EditSellerDto, callback) {
      let postBody = EditSellerDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling editSeller");
      }
      // verify the required parameter 'EditSellerDto' is set
      if (EditSellerDto === undefined || EditSellerDto === null) {
        throw new Error("Missing the required parameter 'EditSellerDto' when calling editSeller");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editSellerCredential operation.
     * @callback module:api/SellersApi~editSellerCredentialCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Editar uma credencial de estabelecimento
     * @param {String} sellerId 
     * @param {String} credentialId 
     * @param {module:model/EditSellerCredentialDto} EditSellerCredentialDto 
     * @param {module:api/SellersApi~editSellerCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editSellerCredential(sellerId, credentialId, EditSellerCredentialDto, callback) {
      let postBody = EditSellerCredentialDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling editSellerCredential");
      }
      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling editSellerCredential");
      }
      // verify the required parameter 'EditSellerCredentialDto' is set
      if (EditSellerCredentialDto === undefined || EditSellerCredentialDto === null) {
        throw new Error("Missing the required parameter 'EditSellerCredentialDto' when calling editSellerCredential");
      }

      let pathParams = {
        'sellerId': sellerId,
        'credentialId': credentialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/credentials/{credentialId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editSellerPartial operation.
     * @callback module:api/SellersApi~editSellerPartialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Editar o seller parcialmente
     * @param {String} sellerId 
     * @param {module:model/EditSellerPartialDto} EditSellerPartialDto 
     * @param {module:api/SellersApi~editSellerPartialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerDto}
     */
    editSellerPartial(sellerId, EditSellerPartialDto, callback) {
      let postBody = EditSellerPartialDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling editSellerPartial");
      }
      // verify the required parameter 'EditSellerPartialDto' is set
      if (EditSellerPartialDto === undefined || EditSellerPartialDto === null) {
        throw new Error("Missing the required parameter 'EditSellerPartialDto' when calling editSellerPartial");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAcceptedPaymentMethodsBySellerId operation.
     * @callback module:api/SellersApi~getAcceptedPaymentMethodsBySellerIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerAcceptedPaymentMethodsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar os métodos de pagamento aceito pelo estabelecimento
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.valueCents 
     * @param {module:api/SellersApi~getAcceptedPaymentMethodsBySellerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerAcceptedPaymentMethodsDto}
     */
    getAcceptedPaymentMethodsBySellerId(sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getAcceptedPaymentMethodsBySellerId");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'valueCents': opts['valueCents']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSellerAcceptedPaymentMethodsDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/accepted-payment-methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSellerSalesSummaryChart operation.
     * @callback module:api/SellersApi~getAllSellerSalesSummaryChartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSaleSummaryChartDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar resumo dos ultimos 6 meses de um Estabelecimentos
     * @param {String} sellerId 
     * @param {module:api/SellersApi~getAllSellerSalesSummaryChartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSaleSummaryChartDto}
     */
    getAllSellerSalesSummaryChart(sellerId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getAllSellerSalesSummaryChart");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSaleSummaryChartDto;
      return this.apiClient.callApi(
        '/v1/sellers/summary-chart/{sellerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotarysOfficesByCns operation.
     * @callback module:api/SellersApi~getNotarysOfficesByCnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotaryOffice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar informações do cartório pelo cns
     * @param {String} cns 
     * @param {module:api/SellersApi~getNotarysOfficesByCnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotaryOffice}
     */
    getNotarysOfficesByCns(cns, callback) {
      let postBody = null;
      // verify the required parameter 'cns' is set
      if (cns === undefined || cns === null) {
        throw new Error("Missing the required parameter 'cns' when calling getNotarysOfficesByCns");
      }

      let pathParams = {
        'cns': cns
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotaryOffice;
      return this.apiClient.callApi(
        '/v1/sellers/get-notarys-office-data/{cns}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportCustomizationBySellerId operation.
     * @callback module:api/SellersApi~getReportCustomizationBySellerIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerReportCustomizationDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar as customizações de relatórios pelo estabelecimento
     * @param {String} sellerId 
     * @param {module:api/SellersApi~getReportCustomizationBySellerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerReportCustomizationDto}
     */
    getReportCustomizationBySellerId(sellerId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getReportCustomizationBySellerId");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSellerReportCustomizationDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/report-customizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSaleByServiceId operation.
     * @callback module:api/SellersApi~getSaleByServiceIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetSaleDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buscar venda pelo service id
     * @param {String} sellerId 
     * @param {String} serviceId 
     * @param {module:api/SellersApi~getSaleByServiceIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetSaleDto>}
     */
    getSaleByServiceId(sellerId, serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSaleByServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getSaleByServiceId");
      }

      let pathParams = {
        'sellerId': sellerId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetSaleDto];
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales/{serviceId}/service-id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeller operation.
     * @callback module:api/SellersApi~getSellerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar os dados do estabelecimento informado
     * @param {String} sellerId 
     * @param {module:api/SellersApi~getSellerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerDto}
     */
    getSeller(sellerId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSeller");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSellerDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSellerByCode operation.
     * @callback module:api/SellersApi~getSellerByCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar os dados do estabelecimento informado pelo código
     * @param {String} codeId 
     * @param {module:api/SellersApi~getSellerByCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerDto}
     */
    getSellerByCode(codeId, callback) {
      let postBody = null;
      // verify the required parameter 'codeId' is set
      if (codeId === undefined || codeId === null) {
        throw new Error("Missing the required parameter 'codeId' when calling getSellerByCode");
      }

      let pathParams = {
        'codeId': codeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSellerDto;
      return this.apiClient.callApi(
        '/v1/sellers/code/{codeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSellerCredential operation.
     * @callback module:api/SellersApi~getSellerCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerCredentialResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buscar uma credencial
     * @param {String} sellerId 
     * @param {String} credentialId 
     * @param {module:api/SellersApi~getSellerCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerCredentialResponseDto}
     */
    getSellerCredential(sellerId, credentialId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSellerCredential");
      }
      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling getSellerCredential");
      }

      let pathParams = {
        'sellerId': sellerId,
        'credentialId': credentialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSellerCredentialResponseDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/credentials/{credentialId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSellerPos operation.
     * @callback module:api/SellersApi~getSellerPosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerPosDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar os dados do POS informado
     * @param {String} sellerId 
     * @param {String} sellerPosId 
     * @param {module:api/SellersApi~getSellerPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerPosDto}
     */
    getSellerPos(sellerId, sellerPosId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSellerPos");
      }
      // verify the required parameter 'sellerPosId' is set
      if (sellerPosId === undefined || sellerPosId === null) {
        throw new Error("Missing the required parameter 'sellerPosId' when calling getSellerPos");
      }

      let pathParams = {
        'sellerId': sellerId,
        'sellerPosId': sellerPosId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSellerPosDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/pos/{sellerPosId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSellerSale operation.
     * @callback module:api/SellersApi~getSellerSaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSaleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar a venda informada
     * @param {String} sellerId 
     * @param {String} saleId 
     * @param {module:api/SellersApi~getSellerSaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSaleDto}
     */
    getSellerSale(sellerId, saleId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSellerSale");
      }
      // verify the required parameter 'saleId' is set
      if (saleId === undefined || saleId === null) {
        throw new Error("Missing the required parameter 'saleId' when calling getSellerSale");
      }

      let pathParams = {
        'sellerId': sellerId,
        'saleId': saleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSaleDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales/{saleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSellerSaleBillet operation.
     * @callback module:api/SellersApi~getSellerSaleBilletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBilletDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar o boleto da venda informada
     * @param {String} sellerId 
     * @param {String} saleId 
     * @param {module:api/SellersApi~getSellerSaleBilletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBilletDto}
     */
    getSellerSaleBillet(sellerId, saleId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSellerSaleBillet");
      }
      // verify the required parameter 'saleId' is set
      if (saleId === undefined || saleId === null) {
        throw new Error("Missing the required parameter 'saleId' when calling getSellerSaleBillet");
      }

      let pathParams = {
        'sellerId': sellerId,
        'saleId': saleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBilletDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales/{saleId}/billets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSellerSalesSummary operation.
     * @callback module:api/SellersApi~getSellerSalesSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSaleSummaryDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar o resumo de todas as vendas de um estabelecimento
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate 
     * @param {String} opts.endDate 
     * @param {module:model/String} opts.status 
     * @param {module:api/SellersApi~getSellerSalesSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSaleSummaryDto}
     */
    getSellerSalesSummary(sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSellerSalesSummary");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSaleSummaryDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSellerSalev2 operation.
     * @callback module:api/SellersApi~getSellerSalev2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSaleWithAcquirerDocumentDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar a venda informada
     * @param {String} sellerId 
     * @param {String} saleId 
     * @param {module:api/SellersApi~getSellerSalev2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSaleWithAcquirerDocumentDto}
     */
    getSellerSalev2(sellerId, saleId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSellerSalev2");
      }
      // verify the required parameter 'saleId' is set
      if (saleId === undefined || saleId === null) {
        throw new Error("Missing the required parameter 'saleId' when calling getSellerSalev2");
      }

      let pathParams = {
        'sellerId': sellerId,
        'saleId': saleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSaleWithAcquirerDocumentDto;
      return this.apiClient.callApi(
        '/v2/sellers/{sellerId}/sales/{saleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSellersByResponsibleId operation.
     * @callback module:api/SellersApi~getSellersByResponsibleIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetSellerDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obter cartórios do responsável
     * @param {String} responsibleId 
     * @param {module:api/SellersApi~getSellersByResponsibleIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetSellerDto>}
     */
    getSellersByResponsibleId(responsibleId, callback) {
      let postBody = null;
      // verify the required parameter 'responsibleId' is set
      if (responsibleId === undefined || responsibleId === null) {
        throw new Error("Missing the required parameter 'responsibleId' when calling getSellersByResponsibleId");
      }

      let pathParams = {
        'responsibleId': responsibleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetSellerDto];
      return this.apiClient.callApi(
        '/v1/sellers/responsible/{responsibleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the internalListSellerSales operation.
     * @callback module:api/SellersApi~internalListSellerSalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar vendas de um estabelecimento
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.description Descricão
     * @param {String} opts.search Busca por descrição, id ou referencia da adquirente
     * @param {Number} opts.amount Valor
     * @param {Number} opts.original_amount Valor original
     * @param {Array.<module:model/String>} opts.type Tipo de pagamento
     * @param {String} opts.name Nome
     * @param {String} opts.payer_name Nome do pagador
     * @param {String} opts.user Usuário
     * @param {Array.<String>} opts.form_payment Forma de pagamento
     * @param {String} opts.startDate Data de inicio. Formato: yyyy-mm-dd
     * @param {String} opts.endDate Data de fim. Formato: yyyy-mm-dd
     * @param {Number} opts.last_number_sales Quantidade de vendas
     * @param {Boolean} opts.payment_day Dia do pagamento
     * @param {String} opts.payer_email Email do pagador
     * @param {String} opts.payer_phone Telefone do pagador
     * @param {Boolean} opts.updated_day Dia da atualização
     * @param {String} opts.created_by_user_name Usuário logado
     * @param {module:model/String} opts.sort  (default to 'time-descending')
     * @param {String} opts.id 
     * @param {Array.<module:model/String>} opts.status 
     * @param {module:api/SellersApi~internalListSellerSalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    internalListSellerSales(limit, current_page, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling internalListSellerSales");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling internalListSellerSales");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling internalListSellerSales");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'description': opts['description'],
        'search': opts['search'],
        'amount': opts['amount'],
        'original_amount': opts['original_amount'],
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'name': opts['name'],
        'payer_name': opts['payer_name'],
        'user': opts['user'],
        'form_payment': this.apiClient.buildCollectionParam(opts['form_payment'], 'multi'),
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'last_number_sales': opts['last_number_sales'],
        'payment_day': opts['payment_day'],
        'payer_email': opts['payer_email'],
        'payer_phone': opts['payer_phone'],
        'updated_day': opts['updated_day'],
        'created_by_user_name': opts['created_by_user_name'],
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort'],
        'id': opts['id'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales/internal/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMerchantSellers operation.
     * @callback module:api/SellersApi~listMerchantSellersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetMerchantSellerDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os sellers do mesmo merchant
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.text 
     * @param {module:api/SellersApi~listMerchantSellersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetMerchantSellerDto>}
     */
    listMerchantSellers(sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listMerchantSellers");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'text': opts['text']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetMerchantSellerDto];
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/list-sellers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellerAcquirers operation.
     * @callback module:api/SellersApi~listSellerAcquirersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetAcquirerDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar as adquirentes do estabelecimento informado
     * @param {String} sellerId 
     * @param {module:api/SellersApi~listSellerAcquirersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetAcquirerDto>}
     */
    listSellerAcquirers(sellerId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerAcquirers");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetAcquirerDto];
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/acquirers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellerBillets operation.
     * @callback module:api/SellersApi~listSellerBilletsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os boletos do estabelecimento informado
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to 'time-descending')
     * @param {module:api/SellersApi~listSellerBilletsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listSellerBillets(limit, current_page, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerBillets");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listSellerBillets");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerBillets");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/billets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellerCredential operation.
     * @callback module:api/SellersApi~listSellerCredentialCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetSellerCredentialResponseDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar credenciais de um estabelecimento
     * @param {String} sellerId 
     * @param {module:api/SellersApi~listSellerCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetSellerCredentialResponseDto>}
     */
    listSellerCredential(sellerId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerCredential");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetSellerCredentialResponseDto];
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/credentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellerPaginatedPos operation.
     * @callback module:api/SellersApi~listSellerPaginatedPosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os POS de um estabelecimento paginado
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {module:model/String} status 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to 'asc')
     * @param {module:api/SellersApi~listSellerPaginatedPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listSellerPaginatedPos(limit, current_page, status, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerPaginatedPos");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listSellerPaginatedPos");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling listSellerPaginatedPos");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerPaginatedPos");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort'],
        'status': status
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/paginated/pos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellerPayer operation.
     * @callback module:api/SellersApi~listSellerPayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPayerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar um pagador do estabelecimento
     * @param {String} sellerId 
     * @param {String} payerDocument 
     * @param {module:api/SellersApi~listSellerPayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPayerDto}
     */
    listSellerPayer(sellerId, payerDocument, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerPayer");
      }
      // verify the required parameter 'payerDocument' is set
      if (payerDocument === undefined || payerDocument === null) {
        throw new Error("Missing the required parameter 'payerDocument' when calling listSellerPayer");
      }

      let pathParams = {
        'sellerId': sellerId,
        'payerDocument': payerDocument
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPayerDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/payers/{payerDocument}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellerPayers operation.
     * @callback module:api/SellersApi~listSellerPayersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar pagadores do estabelecimento
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to 'time-descending')
     * @param {String} opts.name 
     * @param {String} opts.document 
     * @param {module:api/SellersApi~listSellerPayersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listSellerPayers(limit, current_page, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerPayers");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listSellerPayers");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerPayers");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort'],
        'name': opts['name'],
        'document': opts['document']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/payers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellerPaymentLinks operation.
     * @callback module:api/SellersApi~listSellerPaymentLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os links de pagamento do estabelecimento informado
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.start_date Formato: yyyy-mm-dd
     * @param {String} opts.end_date Formato: yyyy-mm-dd
     * @param {String} opts.id 
     * @param {String} opts.email 
     * @param {String} opts.description 
     * @param {String} opts.payer_name 
     * @param {Array.<module:model/String>} opts.status 
     * @param {Array.<module:model/String>} opts.form_payment 
     * @param {module:api/SellersApi~listSellerPaymentLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listSellerPaymentLinks(limit, current_page, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerPaymentLinks");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listSellerPaymentLinks");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerPaymentLinks");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'start_date': opts['start_date'],
        'end_date': opts['end_date'],
        'limit': limit,
        'current_page': current_page,
        'id': opts['id'],
        'email': opts['email'],
        'description': opts['description'],
        'payer_name': opts['payer_name'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'form_payment': this.apiClient.buildCollectionParam(opts['form_payment'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/payment-links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellerPos operation.
     * @callback module:api/SellersApi~listSellerPosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetSellerPosDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os POS de um estabelecimento
     * @param {String} sellerId 
     * @param {module:api/SellersApi~listSellerPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetSellerPosDto>}
     */
    listSellerPos(sellerId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerPos");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetSellerPosDto];
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/pos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellerProtestLinks operation.
     * @callback module:api/SellersApi~listSellerProtestLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os links de protesto do estabelecimento informado
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.start_date Formato: yyyy-mm-dd
     * @param {String} opts.end_date Formato: yyyy-mm-dd
     * @param {String} opts.id 
     * @param {String} opts.email 
     * @param {Array.<module:model/String>} opts.status 
     * @param {Array.<module:model/String>} opts.form_payment 
     * @param {module:api/SellersApi~listSellerProtestLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listSellerProtestLinks(limit, current_page, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerProtestLinks");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listSellerProtestLinks");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerProtestLinks");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'start_date': opts['start_date'],
        'end_date': opts['end_date'],
        'limit': limit,
        'current_page': current_page,
        'id': opts['id'],
        'email': opts['email'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'form_payment': this.apiClient.buildCollectionParam(opts['form_payment'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/protest-links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellerSales operation.
     * @callback module:api/SellersApi~listSellerSalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar vendas de um estabelecimento
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.description Descricão
     * @param {String} opts.search Busca por descrição, protocolo, id ou referencia da adquirente
     * @param {Number} opts.amount Valor
     * @param {Number} opts.original_amount Valor original
     * @param {Array.<module:model/String>} opts.type Tipo de pagamento
     * @param {String} opts.name Nome
     * @param {String} opts.payer_name Nome do pagador
     * @param {String} opts.user Usuário
     * @param {Array.<String>} opts.form_payment Forma de pagamento
     * @param {String} opts.startDate Data de inicio. Formato: yyyy-mm-dd
     * @param {String} opts.endDate Data de fim. Formato: yyyy-mm-dd
     * @param {Number} opts.last_number_sales Quantidade de vendas
     * @param {Boolean} opts.payment_day Dia do pagamento
     * @param {String} opts.payer_email Email do pagador
     * @param {String} opts.payer_phone Telefone do pagador
     * @param {String} opts.settlement_batch_id ID do lote
     * @param {String} opts.settlement_batch_day Data de liquidação do lote
     * @param {Boolean} opts.updated_day Dia da atualização
     * @param {String} opts.created_by_user_name Usuário logado
     * @param {module:model/String} opts.sort  (default to 'time-descending')
     * @param {String} opts.id 
     * @param {Array.<module:model/String>} opts.status 
     * @param {module:api/SellersApi~listSellerSalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listSellerSales(limit, current_page, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerSales");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listSellerSales");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerSales");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'description': opts['description'],
        'search': opts['search'],
        'amount': opts['amount'],
        'original_amount': opts['original_amount'],
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'name': opts['name'],
        'payer_name': opts['payer_name'],
        'user': opts['user'],
        'form_payment': this.apiClient.buildCollectionParam(opts['form_payment'], 'multi'),
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'last_number_sales': opts['last_number_sales'],
        'payment_day': opts['payment_day'],
        'payer_email': opts['payer_email'],
        'payer_phone': opts['payer_phone'],
        'settlement_batch_id': opts['settlement_batch_id'],
        'settlement_batch_day': opts['settlement_batch_day'],
        'updated_day': opts['updated_day'],
        'created_by_user_name': opts['created_by_user_name'],
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort'],
        'id': opts['id'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellerSalesV2 operation.
     * @callback module:api/SellersApi~listSellerSalesV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar vendas de um estabelecimento
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.description Descricão
     * @param {String} opts.search Busca por descrição, protocolo, id ou referencia da adquirente
     * @param {Number} opts.amount Valor
     * @param {Number} opts.original_amount Valor original
     * @param {Array.<module:model/String>} opts.type Tipo de pagamento
     * @param {String} opts.name Nome
     * @param {String} opts.payer_name Nome do pagador
     * @param {String} opts.user Usuário
     * @param {Array.<String>} opts.form_payment Forma de pagamento
     * @param {String} opts.startDate Data de inicio. Formato: yyyy-mm-dd
     * @param {String} opts.endDate Data de fim. Formato: yyyy-mm-dd
     * @param {Number} opts.last_number_sales Quantidade de vendas
     * @param {Boolean} opts.payment_day Dia do pagamento
     * @param {String} opts.payer_email Email do pagador
     * @param {String} opts.payer_phone Telefone do pagador
     * @param {String} opts.settlement_batch_id ID do lote
     * @param {String} opts.settlement_batch_day Data de liquidação do lote
     * @param {Boolean} opts.updated_day Dia da atualização
     * @param {String} opts.created_by_user_name Usuário logado
     * @param {module:model/String} opts.sort  (default to 'time-descending')
     * @param {String} opts.id 
     * @param {Array.<module:model/String>} opts.status 
     * @param {module:api/SellersApi~listSellerSalesV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listSellerSalesV2(limit, current_page, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerSalesV2");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listSellerSalesV2");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerSalesV2");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'description': opts['description'],
        'search': opts['search'],
        'amount': opts['amount'],
        'original_amount': opts['original_amount'],
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'name': opts['name'],
        'payer_name': opts['payer_name'],
        'user': opts['user'],
        'form_payment': this.apiClient.buildCollectionParam(opts['form_payment'], 'multi'),
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'last_number_sales': opts['last_number_sales'],
        'payment_day': opts['payment_day'],
        'payer_email': opts['payer_email'],
        'payer_phone': opts['payer_phone'],
        'settlement_batch_id': opts['settlement_batch_id'],
        'settlement_batch_day': opts['settlement_batch_day'],
        'updated_day': opts['updated_day'],
        'created_by_user_name': opts['created_by_user_name'],
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort'],
        'id': opts['id'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v2/sellers/{sellerId}/sales', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellerUsers operation.
     * @callback module:api/SellersApi~listSellerUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar os usuários do estabelecimento
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {String} sellerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to 'time-descending')
     * @param {module:api/SellersApi~listSellerUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listSellerUsers(limit, current_page, sellerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerUsers");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listSellerUsers");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listSellerUsers");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellers operation.
     * @callback module:api/SellersApi~listSellersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar estabelecimentos
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sort  (default to 'time-descending')
     * @param {String} opts.text 
     * @param {Array.<module:model/String>} opts.status 
     * @param {String} opts.document 
     * @param {String} opts.name 
     * @param {String} opts.sellerId 
     * @param {module:model/String} opts.mode 
     * @param {module:model/String} opts.billet_provider 
     * @param {String} opts.cns 
     * @param {String} opts.code 
     * @param {module:api/SellersApi~listSellersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listSellers(limit, current_page, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellers");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listSellers");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort'],
        'text': opts['text'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'document': opts['document'],
        'name': opts['name'],
        'sellerId': opts['sellerId'],
        'mode': opts['mode'],
        'billet_provider': opts['billet_provider'],
        'cns': opts['cns'],
        'code': opts['code']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/sellers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newConfirmSales operation.
     * @callback module:api/SellersApi~newConfirmSalesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Autorizar liquidação das vendas que estão aguardando confirmação
     * @param {String} sellerId 
     * @param {module:model/ConfirmPaymentDto} ConfirmPaymentDto 
     * @param {module:api/SellersApi~newConfirmSalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    newConfirmSales(sellerId, ConfirmPaymentDto, callback) {
      let postBody = ConfirmPaymentDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling newConfirmSales");
      }
      // verify the required parameter 'ConfirmPaymentDto' is set
      if (ConfirmPaymentDto === undefined || ConfirmPaymentDto === null) {
        throw new Error("Missing the required parameter 'ConfirmPaymentDto' when calling newConfirmSales");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/sellers/{sellerId}/sales/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSeller operation.
     * @callback module:api/SellersApi~searchSellerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SearchSellerDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buscar em estabelecimentos
     * @param {Object} opts Optional parameters
     * @param {String} opts.search 
     * @param {module:api/SellersApi~searchSellerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SearchSellerDto>}
     */
    searchSeller(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SearchSellerDto];
      return this.apiClient.callApi(
        '/v1/sellers/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the splitSale operation.
     * @callback module:api/SellersApi~splitSaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitRulesDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Splitar uma venda pelos estabelecimentos informados
     * @param {String} sellerId 
     * @param {String} saleId 
     * @param {Array.<module:model/CreateSplitRulesDto>} CreateSplitRulesDto 
     * @param {module:api/SellersApi~splitSaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitRulesDto}
     */
    splitSale(sellerId, saleId, CreateSplitRulesDto, callback) {
      let postBody = CreateSplitRulesDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling splitSale");
      }
      // verify the required parameter 'saleId' is set
      if (saleId === undefined || saleId === null) {
        throw new Error("Missing the required parameter 'saleId' when calling splitSale");
      }
      // verify the required parameter 'CreateSplitRulesDto' is set
      if (CreateSplitRulesDto === undefined || CreateSplitRulesDto === null) {
        throw new Error("Missing the required parameter 'CreateSplitRulesDto' when calling splitSale");
      }

      let pathParams = {
        'sellerId': sellerId,
        'saleId': saleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SplitRulesDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/sales/{saleId}/split', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSellerTheme operation.
     * @callback module:api/SellersApi~updateSellerThemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar o tema do estabelecimento
     * @param {String} sellerId 
     * @param {module:model/UpdateSellerThemeDto} UpdateSellerThemeDto 
     * @param {module:api/SellersApi~updateSellerThemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSellerTheme(sellerId, UpdateSellerThemeDto, callback) {
      let postBody = UpdateSellerThemeDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling updateSellerTheme");
      }
      // verify the required parameter 'UpdateSellerThemeDto' is set
      if (UpdateSellerThemeDto === undefined || UpdateSellerThemeDto === null) {
        throw new Error("Missing the required parameter 'UpdateSellerThemeDto' when calling updateSellerTheme");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/theme', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSellerUser operation.
     * @callback module:api/SellersApi~updateSellerUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSellerUserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar um usuário do estabelecimento
     * @param {String} sellerId 
     * @param {String} userId 
     * @param {module:model/UpdateSellerUserDto} UpdateSellerUserDto 
     * @param {module:api/SellersApi~updateSellerUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSellerUserDto}
     */
    updateSellerUser(sellerId, userId, UpdateSellerUserDto, callback) {
      let postBody = UpdateSellerUserDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling updateSellerUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateSellerUser");
      }
      // verify the required parameter 'UpdateSellerUserDto' is set
      if (UpdateSellerUserDto === undefined || UpdateSellerUserDto === null) {
        throw new Error("Missing the required parameter 'UpdateSellerUserDto' when calling updateSellerUser");
      }

      let pathParams = {
        'sellerId': sellerId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSellerUserDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/users/{userId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadSellerLogo operation.
     * @callback module:api/SellersApi~uploadSellerLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLogoDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Realizar upload da logo do estabelecimento
     * @param {String} sellerId 
     * @param {File} file 
     * @param {module:api/SellersApi~uploadSellerLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLogoDto}
     */
    uploadSellerLogo(sellerId, file, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling uploadSellerLogo");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadSellerLogo");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GetLogoDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
