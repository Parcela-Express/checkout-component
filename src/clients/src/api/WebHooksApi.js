/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateWebHookLinkDto from '../model/CreateWebHookLinkDto';
import CreateWebHookLinkResponseDto from '../model/CreateWebHookLinkResponseDto';
import ListWebHookLinkResponseDto from '../model/ListWebHookLinkResponseDto';

/**
* WebHooks service.
* @module api/WebHooksApi
* @version 1.0
*/
export default class WebHooksApi {

    /**
    * Constructs a new WebHooksApi. 
    * @alias module:api/WebHooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWebHookSellerLink operation.
     * @callback module:api/WebHooksApi~createWebHookSellerLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWebHookLinkResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Criar um link de webhook para um seller
     * @param {String} sellerId 
     * @param {module:model/CreateWebHookLinkDto} CreateWebHookLinkDto 
     * @param {module:api/WebHooksApi~createWebHookSellerLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWebHookLinkResponseDto}
     */
    createWebHookSellerLink(sellerId, CreateWebHookLinkDto, callback) {
      let postBody = CreateWebHookLinkDto;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling createWebHookSellerLink");
      }
      // verify the required parameter 'CreateWebHookLinkDto' is set
      if (CreateWebHookLinkDto === undefined || CreateWebHookLinkDto === null) {
        throw new Error("Missing the required parameter 'CreateWebHookLinkDto' when calling createWebHookSellerLink");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWebHookLinkResponseDto;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWebHookUrl operation.
     * @callback module:api/WebHooksApi~deleteWebHookUrlCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletar url espec√≠fica
     * @param {String} urlId 
     * @param {String} sellerId 
     * @param {module:api/WebHooksApi~deleteWebHookUrlCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWebHookUrl(urlId, sellerId, callback) {
      let postBody = null;
      // verify the required parameter 'urlId' is set
      if (urlId === undefined || urlId === null) {
        throw new Error("Missing the required parameter 'urlId' when calling deleteWebHookUrl");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling deleteWebHookUrl");
      }

      let pathParams = {
        'urlId': urlId,
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/webhooks/{urlId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUrlsBySeller operation.
     * @callback module:api/WebHooksApi~listUrlsBySellerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListWebHookLinkResponseDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar urls por seller
     * @param {String} sellerId 
     * @param {module:api/WebHooksApi~listUrlsBySellerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListWebHookLinkResponseDto>}
     */
    listUrlsBySeller(sellerId, callback) {
      let postBody = null;
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling listUrlsBySeller");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListWebHookLinkResponseDto];
      return this.apiClient.callApi(
        '/v1/sellers/{sellerId}/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
