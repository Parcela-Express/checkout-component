/**
 * Parcela Express API
 * Parcela Express API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateExportSalesListDto from '../model/CreateExportSalesListDto';
import GetFileExportRequestDto from '../model/GetFileExportRequestDto';
import GetSaleDto from '../model/GetSaleDto';
import GetSaleSummaryChartDto from '../model/GetSaleSummaryChartDto';
import GetSaleSummaryDto from '../model/GetSaleSummaryDto';
import PaginatedDto from '../model/PaginatedDto';

/**
* Sales service.
* @module api/SalesApi
* @version 1.0
*/
export default class SalesApi {

    /**
    * Constructs a new SalesApi. 
    * @alias module:api/SalesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSalesBillPaymentListExportRequest operation.
     * @callback module:api/SalesApi~createSalesBillPaymentListExportRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFileExportRequestDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gerar uma requisição de exportação da lista de Pagamento de Contas
     * @param {module:model/CreateExportSalesListDto} CreateExportSalesListDto 
     * @param {module:api/SalesApi~createSalesBillPaymentListExportRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFileExportRequestDto}
     */
    createSalesBillPaymentListExportRequest(CreateExportSalesListDto, callback) {
      let postBody = CreateExportSalesListDto;
      // verify the required parameter 'CreateExportSalesListDto' is set
      if (CreateExportSalesListDto === undefined || CreateExportSalesListDto === null) {
        throw new Error("Missing the required parameter 'CreateExportSalesListDto' when calling createSalesBillPaymentListExportRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFileExportRequestDto;
      return this.apiClient.callApi(
        '/v1/sales/list/export/billpayment/requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSalesHistoryExportRequest operation.
     * @callback module:api/SalesApi~createSalesHistoryExportRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFileExportRequestDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gerar uma requisição de exportação do histórico de vendas
     * @param {module:model/CreateExportSalesListDto} CreateExportSalesListDto 
     * @param {module:api/SalesApi~createSalesHistoryExportRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFileExportRequestDto}
     */
    createSalesHistoryExportRequest(CreateExportSalesListDto, callback) {
      let postBody = CreateExportSalesListDto;
      // verify the required parameter 'CreateExportSalesListDto' is set
      if (CreateExportSalesListDto === undefined || CreateExportSalesListDto === null) {
        throw new Error("Missing the required parameter 'CreateExportSalesListDto' when calling createSalesHistoryExportRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFileExportRequestDto;
      return this.apiClient.callApi(
        '/v1/sales/history/export/requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSalesListExportRequest operation.
     * @callback module:api/SalesApi~createSalesListExportRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFileExportRequestDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gerar uma requisição de exportação da lista de vendas
     * @param {module:model/CreateExportSalesListDto} CreateExportSalesListDto 
     * @param {module:api/SalesApi~createSalesListExportRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFileExportRequestDto}
     */
    createSalesListExportRequest(CreateExportSalesListDto, callback) {
      let postBody = CreateExportSalesListDto;
      // verify the required parameter 'CreateExportSalesListDto' is set
      if (CreateExportSalesListDto === undefined || CreateExportSalesListDto === null) {
        throw new Error("Missing the required parameter 'CreateExportSalesListDto' when calling createSalesListExportRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFileExportRequestDto;
      return this.apiClient.callApi(
        '/v1/sales/list/export/requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSalesSummary operation.
     * @callback module:api/SalesApi~getAllSalesSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSaleSummaryDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar resumo de venda de todos Estabelecimentos
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate 
     * @param {String} opts.endDate 
     * @param {module:model/String} opts.status 
     * @param {module:api/SalesApi~getAllSalesSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSaleSummaryDto}
     */
    getAllSalesSummary(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSaleSummaryDto;
      return this.apiClient.callApi(
        '/v1/sales/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSalesSummaryChart operation.
     * @callback module:api/SalesApi~getAllSalesSummaryChartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSaleSummaryChartDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar resumo dos ultimos 6 meses de todos Estabelecimentos
     * @param {module:api/SalesApi~getAllSalesSummaryChartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSaleSummaryChartDto}
     */
    getAllSalesSummaryChart(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSaleSummaryChartDto;
      return this.apiClient.callApi(
        '/v1/sales/summary-chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSale operation.
     * @callback module:api/SalesApi~getSaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSaleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retornar dados de uma venda especifica
     * @param {String} saleId 
     * @param {module:api/SalesApi~getSaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSaleDto}
     */
    getSale(saleId, callback) {
      let postBody = null;
      // verify the required parameter 'saleId' is set
      if (saleId === undefined || saleId === null) {
        throw new Error("Missing the required parameter 'saleId' when calling getSale");
      }

      let pathParams = {
        'saleId': saleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSaleDto;
      return this.apiClient.callApi(
        '/v1/sales/{saleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSales operation.
     * @callback module:api/SalesApi~listSalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar as vendas de todos os estabelecimentos
     * @param {Number} limit 
     * @param {Number} current_page 
     * @param {Object} opts Optional parameters
     * @param {String} opts.description Descricão
     * @param {String} opts.search Busca por descrição, protocolo, id ou referencia da adquirente
     * @param {Number} opts.amount Valor
     * @param {Number} opts.original_amount Valor original
     * @param {Array.<module:model/String>} opts.type Tipo de pagamento
     * @param {String} opts.name Nome
     * @param {String} opts.payer_name Nome do pagador
     * @param {String} opts.user Usuário
     * @param {Array.<String>} opts.form_payment Forma de pagamento
     * @param {String} opts.startDate Data de inicio. Formato: yyyy-mm-dd
     * @param {String} opts.endDate Data de fim. Formato: yyyy-mm-dd
     * @param {Number} opts.last_number_sales Quantidade de vendas
     * @param {Boolean} opts.payment_day Dia do pagamento
     * @param {String} opts.payer_email Email do pagador
     * @param {String} opts.payer_phone Telefone do pagador
     * @param {String} opts.settlement_batch_id ID do lote
     * @param {String} opts.settlement_batch_day Data de liquidação do lote
     * @param {Boolean} opts.updated_day Dia da atualização
     * @param {String} opts.created_by_user_name Usuário logado
     * @param {module:model/String} opts.sort  (default to 'time-descending')
     * @param {String} opts.id 
     * @param {Array.<module:model/String>} opts.status 
     * @param {module:api/SalesApi~listSalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDto}
     */
    listSales(limit, current_page, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSales");
      }
      // verify the required parameter 'current_page' is set
      if (current_page === undefined || current_page === null) {
        throw new Error("Missing the required parameter 'current_page' when calling listSales");
      }

      let pathParams = {
      };
      let queryParams = {
        'description': opts['description'],
        'search': opts['search'],
        'amount': opts['amount'],
        'original_amount': opts['original_amount'],
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'name': opts['name'],
        'payer_name': opts['payer_name'],
        'user': opts['user'],
        'form_payment': this.apiClient.buildCollectionParam(opts['form_payment'], 'multi'),
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'last_number_sales': opts['last_number_sales'],
        'payment_day': opts['payment_day'],
        'payer_email': opts['payer_email'],
        'payer_phone': opts['payer_phone'],
        'settlement_batch_id': opts['settlement_batch_id'],
        'settlement_batch_day': opts['settlement_batch_day'],
        'updated_day': opts['updated_day'],
        'created_by_user_name': opts['created_by_user_name'],
        'limit': limit,
        'current_page': current_page,
        'sort': opts['sort'],
        'id': opts['id'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDto;
      return this.apiClient.callApi(
        '/v1/sales', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the payPix operation.
     * @callback module:api/SalesApi~payPixCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pagar PIX (em ambiente de desenvolvimento)
     * @param {String} saleId 
     * @param {module:api/SalesApi~payPixCallback} callback The callback function, accepting three arguments: error, data, response
     */
    payPix(saleId, callback) {
      let postBody = null;
      // verify the required parameter 'saleId' is set
      if (saleId === undefined || saleId === null) {
        throw new Error("Missing the required parameter 'saleId' when calling payPix");
      }

      let pathParams = {
        'saleId': saleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sales/{saleId}/pix/pay', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
