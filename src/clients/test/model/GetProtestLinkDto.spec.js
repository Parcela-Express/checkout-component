/*
 * Parcela Express API
 * Parcela Express API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ParcelaExpressApi);
  }
}(this, function(expect, ParcelaExpressApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetProtestLinkDto', function() {
      beforeEach(function() {
        instance = new ParcelaExpressApi.GetProtestLinkDto();
      });

      it('should create an instance of GetProtestLinkDto', function() {
        // TODO: update the code to test GetProtestLinkDto
        expect(instance).to.be.a(ParcelaExpressApi.GetProtestLinkDto);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property fee (base name: "fee")', function() {
        // TODO: update the code to test the property fee
        expect(instance).to.have.property('fee');
        // expect(instance.fee).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property token (base name: "token")', function() {
        // TODO: update the code to test the property token
        expect(instance).to.have.property('token');
        // expect(instance.token).to.be(expectedValueLiteral);
      });

      it('should have the property payer (base name: "payer")', function() {
        // TODO: update the code to test the property payer
        expect(instance).to.have.property('payer');
        // expect(instance.payer).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "user")', function() {
        // TODO: update the code to test the property user
        expect(instance).to.have.property('user');
        // expect(instance.user).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property formattedStatus (base name: "formatted_status")', function() {
        // TODO: update the code to test the property formattedStatus
        expect(instance).to.have.property('formattedStatus');
        // expect(instance.formattedStatus).to.be(expectedValueLiteral);
      });

      it('should have the property generatedByPayer (base name: "generated_by_payer")', function() {
        // TODO: update the code to test the property generatedByPayer
        expect(instance).to.have.property('generatedByPayer');
        // expect(instance.generatedByPayer).to.be(expectedValueLiteral);
      });

      it('should have the property formattedGeneratedByPayer (base name: "formatted_generated_by_payer")', function() {
        // TODO: update the code to test the property formattedGeneratedByPayer
        expect(instance).to.have.property('formattedGeneratedByPayer');
        // expect(instance.formattedGeneratedByPayer).to.be(expectedValueLiteral);
      });

      it('should have the property sale (base name: "sale")', function() {
        // TODO: update the code to test the property sale
        expect(instance).to.have.property('sale');
        // expect(instance.sale).to.be(expectedValueLiteral);
      });

      it('should have the property seller (base name: "seller")', function() {
        // TODO: update the code to test the property seller
        expect(instance).to.have.property('seller');
        // expect(instance.seller).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updated_at")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property expiresIn (base name: "expires_in")', function() {
        // TODO: update the code to test the property expiresIn
        expect(instance).to.have.property('expiresIn');
        // expect(instance.expiresIn).to.be(expectedValueLiteral);
      });

      it('should have the property billetPaymentIsPermitted (base name: "billet_payment_is_permitted")', function() {
        // TODO: update the code to test the property billetPaymentIsPermitted
        expect(instance).to.have.property('billetPaymentIsPermitted');
        // expect(instance.billetPaymentIsPermitted).to.be(expectedValueLiteral);
      });

      it('should have the property qrcodePaymentIsPermitted (base name: "qrcode_payment_is_permitted")', function() {
        // TODO: update the code to test the property qrcodePaymentIsPermitted
        expect(instance).to.have.property('qrcodePaymentIsPermitted');
        // expect(instance.qrcodePaymentIsPermitted).to.be(expectedValueLiteral);
      });

      it('should have the property cardPaymentIsPermitted (base name: "card_payment_is_permitted")', function() {
        // TODO: update the code to test the property cardPaymentIsPermitted
        expect(instance).to.have.property('cardPaymentIsPermitted');
        // expect(instance.cardPaymentIsPermitted).to.be(expectedValueLiteral);
      });

      it('should have the property qrcodeUrl (base name: "qrcode_url")', function() {
        // TODO: update the code to test the property qrcodeUrl
        expect(instance).to.have.property('qrcodeUrl');
        // expect(instance.qrcodeUrl).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMethods (base name: "payment_methods")', function() {
        // TODO: update the code to test the property paymentMethods
        expect(instance).to.have.property('paymentMethods');
        // expect(instance.paymentMethods).to.be(expectedValueLiteral);
      });

      it('should have the property preCapture (base name: "pre_capture")', function() {
        // TODO: update the code to test the property preCapture
        expect(instance).to.have.property('preCapture');
        // expect(instance.preCapture).to.be(expectedValueLiteral);
      });

      it('should have the property logo (base name: "logo")', function() {
        // TODO: update the code to test the property logo
        expect(instance).to.have.property('logo');
        // expect(instance.logo).to.be(expectedValueLiteral);
      });

      it('should have the property theme (base name: "theme")', function() {
        // TODO: update the code to test the property theme
        expect(instance).to.have.property('theme');
        // expect(instance.theme).to.be(expectedValueLiteral);
      });

    });
  });

}));
